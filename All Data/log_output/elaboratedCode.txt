    private void TlacDopravaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TlacDopravaActionPerformed

    

        try {



            if (prvniStisknutiTlacitka == true)

            {       

                

                //Nacte vsechny dotazy aby je mohl zobrazit

                NactiDotazy DotazyzTxt = new NactiDotazy();

               

    public NactiDotazy() throws IOException{

        

        String Adresa;

        String ZdrojDotazuVlevo;

        String ZdrojDotazuVpravo;

        

        Adresa = "C:\\Users\\jonas\\OneDrive\\Dokumenty\\JAVA\\Pokusy\\DataBase\\EXAMPLES-w3resource\\";

        ZdrojDotazuVlevo = "RetrieveDataFromTablesCZ.txt";

        ZdrojDotazuVpravo = "RetrieveDataFromTablesCZvpravo.txt";

        

        //Provizorne naplnuji pole

        SubDotazyPopis[0][0] = "SubDotazyPopis[0][0]";

        SubDotazyPopis[0][1] = "SubDotazyPopis[0][1]";

        SubDotazyPopis[0][2] = "SubDotazyPopis[0][2]";

        

        SubDotazyPopis[1][0] = "SubDotazyPopis[1][0]";

        SubDotazyPopis[1][1] = "SubDotazyPopis[1][1]";

        SubDotazyPopis[1][2] = "SubDotazyPopis[1][2]";

        

        SubDotazyPopis[2][0] = "SubDotazyPopis[2][0]";

        SubDotazyPopis[2][1] = "SubDotazyPopis[2][1]";

        SubDotazyPopis[2][2] = "SubDotazyPopis[2][2]";

        

        

        //Provizorne naplnuji pole

        SubDotazySQL[0][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[0][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[0][2] = "SELECT pro_name, pro_price FROM item_mast";

        

        SubDotazySQL[1][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[1][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[1][2] = "SELECT pro_name, pro_price FROM item_mast";

        

        SubDotazySQL[2][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[2][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[2][2] = "SELECT pro_name, pro_price FROM item_mast";



        //Ziska data vlevo

        vratSQLDotazy(Adresa, ZdrojDotazuVlevo); 

        DotazySQLVlevo = DotazySQL;

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

        DotazyPopisVlevo = DotazyPopis;

        cislaPopisuVlevo = oddelCisloDotazuOdTextuVlevo();

        

    

    private int[] oddelCisloDotazuOdTextuVlevo(){

        

        String CisloStr;

        int CisloInt = 0;

        String[] stringArr;

        int[] cislaPopisu;

        String DotazPopis;

        

        //Oddeli cislo dotazu od textu dotazu

        cislaPopisu = new int[DotazyPopisVlevo.length];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVlevo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr = stringArr[0];

            if (isNumeric(CisloStr) == true){

                CisloInt = Integer.parseInt(CisloStr);

            }

            

            cislaPopisu[i] = CisloInt;

        }

        

        return (cislaPopisu);

        

    }

        //Ziska data vpravo

        vratSQLDotazy(Adresa, ZdrojDotazuVpravo); 

        DotazySQLVpravo = DotazySQL;

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

        DotazyPopisVpravo = DotazyPopis;

        cislaPopisuVPravo = oddelCisloDotazuOdTextuVpravo();

        

    

    private int[][] oddelCisloDotazuOdTextuVpravo(){  

        

        String CisloStr1;

        String CisloStr2;

        int CisloInt1 = 0;

        int CisloInt2 = 0;

        

        String[] stringArr;

        int[][] cislaPopisu;

        String DotazPopis;

        

        cislaPopisu = new int[DotazyPopisVpravo.length][2];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVpravo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr1 = stringArr[0];

            CisloStr2 = stringArr[1];

            

            if (isNumeric(CisloStr1) == true){

                CisloInt1 = Integer.parseInt(CisloStr1);

            }

            if (isNumeric(CisloStr2) == true){

                CisloInt2 = Integer.parseInt(CisloStr2);

            }

            

            cislaPopisu[i][0] = CisloInt1;

            cislaPopisu[i][1] = CisloInt2;

            System.out.println("");

        }

        

        return (cislaPopisu);

    }

        preusporadejDataVPravoDo2D();

        

    private void preusporadejDataVPravoDo2D()

    {

        int popis1;

        int popis1Predchozi;

        int popis2;

        

        int radek;

        int sloupec;

        

        String DotazSQLVPravo;

        String DotazPopisVpravo;

        

        cislaPopisuVPravo2D = new int[cislaPopisuVlevo.length][10];

        DotazySQLVpravo2D = new String[DotazySQLVpravo.length][10];

        DotazyPopisVpravo2D = new String[DotazyPopisVpravo.length][10];

        popis1Predchozi = 0;

        

        radek = -1;

        sloupec = 0;

        

        for (int r = 0; r < cislaPopisuVPravo.length; r++) {

            popis1 = cislaPopisuVPravo[r][0];

            popis2 = cislaPopisuVPravo[r][1];

            

            DotazSQLVPravo = DotazySQLVpravo[r];

            DotazPopisVpravo = DotazyPopisVpravo[r];

            

            if (popis1 != popis1Predchozi){

                radek = radek + 1;

                sloupec = 1;

                cislaPopisuVPravo2D[radek][0] = popis1;

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                

                DotazySQLVpravo2D[radek][0] = "" + popis1;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                

                DotazyPopisVpravo2D[radek][0] = "" + popis1;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

                popis1Predchozi = popis1;

                

            } else {

                sloupec = sloupec + 1;

                

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

            }

            

           

        }

        



    }

    public NactiDotazy() throws IOException{

        

        String Adresa;

        String ZdrojDotazuVlevo;

        String ZdrojDotazuVpravo;

        

        Adresa = "C:\\Users\\jonas\\OneDrive\\Dokumenty\\JAVA\\Pokusy\\DataBase\\EXAMPLES-w3resource\\";

        ZdrojDotazuVlevo = "RetrieveDataFromTablesCZ.txt";

        ZdrojDotazuVpravo = "RetrieveDataFromTablesCZvpravo.txt";

        

        //Provizorne naplnuji pole

        SubDotazyPopis[0][0] = "SubDotazyPopis[0][0]";

        SubDotazyPopis[0][1] = "SubDotazyPopis[0][1]";

        SubDotazyPopis[0][2] = "SubDotazyPopis[0][2]";

        

        SubDotazyPopis[1][0] = "SubDotazyPopis[1][0]";

        SubDotazyPopis[1][1] = "SubDotazyPopis[1][1]";

        SubDotazyPopis[1][2] = "SubDotazyPopis[1][2]";

        

        SubDotazyPopis[2][0] = "SubDotazyPopis[2][0]";

        SubDotazyPopis[2][1] = "SubDotazyPopis[2][1]";

        SubDotazyPopis[2][2] = "SubDotazyPopis[2][2]";

        

        

        //Provizorne naplnuji pole

        SubDotazySQL[0][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[0][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[0][2] = "SELECT pro_name, pro_price FROM item_mast";

        

        SubDotazySQL[1][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[1][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[1][2] = "SELECT pro_name, pro_price FROM item_mast";

        

        SubDotazySQL[2][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[2][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[2][2] = "SELECT pro_name, pro_price FROM item_mast";



        //Ziska data vlevo

        vratSQLDotazy(Adresa, ZdrojDotazuVlevo); 

        DotazySQLVlevo = DotazySQL;

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

        DotazyPopisVlevo = DotazyPopis;

        cislaPopisuVlevo = oddelCisloDotazuOdTextuVlevo();

        

    

    private int[] oddelCisloDotazuOdTextuVlevo(){

        

        String CisloStr;

        int CisloInt = 0;

        String[] stringArr;

        int[] cislaPopisu;

        String DotazPopis;

        

        //Oddeli cislo dotazu od textu dotazu

        cislaPopisu = new int[DotazyPopisVlevo.length];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVlevo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr = stringArr[0];

            if (isNumeric(CisloStr) == true){

                CisloInt = Integer.parseInt(CisloStr);

            }

            

            cislaPopisu[i] = CisloInt;

        }

        

        return (cislaPopisu);

        

    }

    

    private int[] oddelCisloDotazuOdTextuVlevo(){

        

        String CisloStr;

        int CisloInt = 0;

        String[] stringArr;

        int[] cislaPopisu;

        String DotazPopis;

        

        //Oddeli cislo dotazu od textu dotazu

        cislaPopisu = new int[DotazyPopisVlevo.length];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVlevo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr = stringArr[0];

            if (isNumeric(CisloStr) == true){

                CisloInt = Integer.parseInt(CisloStr);

            }

            

            cislaPopisu[i] = CisloInt;

        }

        

        return (cislaPopisu);

        

    }

        //Ziska data vpravo

        vratSQLDotazy(Adresa, ZdrojDotazuVpravo); 

        DotazySQLVpravo = DotazySQL;

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

        DotazyPopisVpravo = DotazyPopis;

        cislaPopisuVPravo = oddelCisloDotazuOdTextuVpravo();

        

    

    private int[][] oddelCisloDotazuOdTextuVpravo(){  

        

        String CisloStr1;

        String CisloStr2;

        int CisloInt1 = 0;

        int CisloInt2 = 0;

        

        String[] stringArr;

        int[][] cislaPopisu;

        String DotazPopis;

        

        cislaPopisu = new int[DotazyPopisVpravo.length][2];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVpravo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr1 = stringArr[0];

            CisloStr2 = stringArr[1];

            

            if (isNumeric(CisloStr1) == true){

                CisloInt1 = Integer.parseInt(CisloStr1);

            }

            if (isNumeric(CisloStr2) == true){

                CisloInt2 = Integer.parseInt(CisloStr2);

            }

            

            cislaPopisu[i][0] = CisloInt1;

            cislaPopisu[i][1] = CisloInt2;

            System.out.println("");

        }

        

        return (cislaPopisu);

    }

    

    private int[][] oddelCisloDotazuOdTextuVpravo(){  

        

        String CisloStr1;

        String CisloStr2;

        int CisloInt1 = 0;

        int CisloInt2 = 0;

        

        String[] stringArr;

        int[][] cislaPopisu;

        String DotazPopis;

        

        cislaPopisu = new int[DotazyPopisVpravo.length][2];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVpravo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr1 = stringArr[0];

            CisloStr2 = stringArr[1];

            

            if (isNumeric(CisloStr1) == true){

                CisloInt1 = Integer.parseInt(CisloStr1);

            }

            if (isNumeric(CisloStr2) == true){

                CisloInt2 = Integer.parseInt(CisloStr2);

            }

            

            cislaPopisu[i][0] = CisloInt1;

            cislaPopisu[i][1] = CisloInt2;

            System.out.println("");

        }

        

        return (cislaPopisu);

    }

        preusporadejDataVPravoDo2D();

        

    private void preusporadejDataVPravoDo2D()

    {

        int popis1;

        int popis1Predchozi;

        int popis2;

        

        int radek;

        int sloupec;

        

        String DotazSQLVPravo;

        String DotazPopisVpravo;

        

        cislaPopisuVPravo2D = new int[cislaPopisuVlevo.length][10];

        DotazySQLVpravo2D = new String[DotazySQLVpravo.length][10];

        DotazyPopisVpravo2D = new String[DotazyPopisVpravo.length][10];

        popis1Predchozi = 0;

        

        radek = -1;

        sloupec = 0;

        

        for (int r = 0; r < cislaPopisuVPravo.length; r++) {

            popis1 = cislaPopisuVPravo[r][0];

            popis2 = cislaPopisuVPravo[r][1];

            

            DotazSQLVPravo = DotazySQLVpravo[r];

            DotazPopisVpravo = DotazyPopisVpravo[r];

            

            if (popis1 != popis1Predchozi){

                radek = radek + 1;

                sloupec = 1;

                cislaPopisuVPravo2D[radek][0] = popis1;

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                

                DotazySQLVpravo2D[radek][0] = "" + popis1;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                

                DotazyPopisVpravo2D[radek][0] = "" + popis1;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

                popis1Predchozi = popis1;

                

            } else {

                sloupec = sloupec + 1;

                

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

            }

            

           

        }

    private void preusporadejDataVPravoDo2D()

    {

        int popis1;

        int popis1Predchozi;

        int popis2;

        

        int radek;

        int sloupec;

        

        String DotazSQLVPravo;

        String DotazPopisVpravo;

        

        cislaPopisuVPravo2D = new int[cislaPopisuVlevo.length][10];

        DotazySQLVpravo2D = new String[DotazySQLVpravo.length][10];

        DotazyPopisVpravo2D = new String[DotazyPopisVpravo.length][10];

        popis1Predchozi = 0;

        

        radek = -1;

        sloupec = 0;

        

        for (int r = 0; r < cislaPopisuVPravo.length; r++) {

            popis1 = cislaPopisuVPravo[r][0];

            popis2 = cislaPopisuVPravo[r][1];

            

            DotazSQLVPravo = DotazySQLVpravo[r];

            DotazPopisVpravo = DotazyPopisVpravo[r];

            

            if (popis1 != popis1Predchozi){

                radek = radek + 1;

                sloupec = 1;

                cislaPopisuVPravo2D[radek][0] = popis1;

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                

                DotazySQLVpravo2D[radek][0] = "" + popis1;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                

                DotazyPopisVpravo2D[radek][0] = "" + popis1;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

                popis1Predchozi = popis1;

                

            } else {

                sloupec = sloupec + 1;

                

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

            }

            

           

        }

        



    }

    public NactiDotazy() throws IOException{

        

        String Adresa;

        String ZdrojDotazuVlevo;

        String ZdrojDotazuVpravo;

        

        Adresa = "C:\\Users\\jonas\\OneDrive\\Dokumenty\\JAVA\\Pokusy\\DataBase\\EXAMPLES-w3resource\\";

        ZdrojDotazuVlevo = "RetrieveDataFromTablesCZ.txt";

        ZdrojDotazuVpravo = "RetrieveDataFromTablesCZvpravo.txt";

        

        //Provizorne naplnuji pole

        SubDotazyPopis[0][0] = "SubDotazyPopis[0][0]";

        SubDotazyPopis[0][1] = "SubDotazyPopis[0][1]";

        SubDotazyPopis[0][2] = "SubDotazyPopis[0][2]";

        

        SubDotazyPopis[1][0] = "SubDotazyPopis[1][0]";

        SubDotazyPopis[1][1] = "SubDotazyPopis[1][1]";

        SubDotazyPopis[1][2] = "SubDotazyPopis[1][2]";

        

        SubDotazyPopis[2][0] = "SubDotazyPopis[2][0]";

        SubDotazyPopis[2][1] = "SubDotazyPopis[2][1]";

        SubDotazyPopis[2][2] = "SubDotazyPopis[2][2]";

        

        

        //Provizorne naplnuji pole

        SubDotazySQL[0][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[0][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[0][2] = "SELECT pro_name, pro_price FROM item_mast";

        

        SubDotazySQL[1][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[1][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[1][2] = "SELECT pro_name, pro_price FROM item_mast";

        

        SubDotazySQL[2][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[2][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[2][2] = "SELECT pro_name, pro_price FROM item_mast";



        //Ziska data vlevo

        vratSQLDotazy(Adresa, ZdrojDotazuVlevo); 

        DotazySQLVlevo = DotazySQL;

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

        DotazyPopisVlevo = DotazyPopis;

        cislaPopisuVlevo = oddelCisloDotazuOdTextuVlevo();

        

    

    private int[] oddelCisloDotazuOdTextuVlevo(){

        

        String CisloStr;

        int CisloInt = 0;

        String[] stringArr;

        int[] cislaPopisu;

        String DotazPopis;

        

        //Oddeli cislo dotazu od textu dotazu

        cislaPopisu = new int[DotazyPopisVlevo.length];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVlevo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr = stringArr[0];

            if (isNumeric(CisloStr) == true){

                CisloInt = Integer.parseInt(CisloStr);

            }

            

            cislaPopisu[i] = CisloInt;

        }

        

        return (cislaPopisu);

        

    }

    

    private int[] oddelCisloDotazuOdTextuVlevo(){

        

        String CisloStr;

        int CisloInt = 0;

        String[] stringArr;

        int[] cislaPopisu;

        String DotazPopis;

        

        //Oddeli cislo dotazu od textu dotazu

        cislaPopisu = new int[DotazyPopisVlevo.length];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVlevo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr = stringArr[0];

            if (isNumeric(CisloStr) == true){

                CisloInt = Integer.parseInt(CisloStr);

            }

            

            cislaPopisu[i] = CisloInt;

        }

        

        return (cislaPopisu);

        

    }

    

    private int[] oddelCisloDotazuOdTextuVlevo(){

        

        String CisloStr;

        int CisloInt = 0;

        String[] stringArr;

        int[] cislaPopisu;

        String DotazPopis;

        

        //Oddeli cislo dotazu od textu dotazu

        cislaPopisu = new int[DotazyPopisVlevo.length];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVlevo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr = stringArr[0];

            if (isNumeric(CisloStr) == true){

                CisloInt = Integer.parseInt(CisloStr);

            }

            

            cislaPopisu[i] = CisloInt;

        }

        

        return (cislaPopisu);

        

    }

        //Ziska data vpravo

        vratSQLDotazy(Adresa, ZdrojDotazuVpravo); 

        DotazySQLVpravo = DotazySQL;

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

        DotazyPopisVpravo = DotazyPopis;

        cislaPopisuVPravo = oddelCisloDotazuOdTextuVpravo();

        

    

    private int[][] oddelCisloDotazuOdTextuVpravo(){  

        

        String CisloStr1;

        String CisloStr2;

        int CisloInt1 = 0;

        int CisloInt2 = 0;

        

        String[] stringArr;

        int[][] cislaPopisu;

        String DotazPopis;

        

        cislaPopisu = new int[DotazyPopisVpravo.length][2];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVpravo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr1 = stringArr[0];

            CisloStr2 = stringArr[1];

            

            if (isNumeric(CisloStr1) == true){

                CisloInt1 = Integer.parseInt(CisloStr1);

            }

            if (isNumeric(CisloStr2) == true){

                CisloInt2 = Integer.parseInt(CisloStr2);

            }

            

            cislaPopisu[i][0] = CisloInt1;

            cislaPopisu[i][1] = CisloInt2;

            System.out.println("");

        }

        

        return (cislaPopisu);

    }

    

    private int[][] oddelCisloDotazuOdTextuVpravo(){  

        

        String CisloStr1;

        String CisloStr2;

        int CisloInt1 = 0;

        int CisloInt2 = 0;

        

        String[] stringArr;

        int[][] cislaPopisu;

        String DotazPopis;

        

        cislaPopisu = new int[DotazyPopisVpravo.length][2];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVpravo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr1 = stringArr[0];

            CisloStr2 = stringArr[1];

            

            if (isNumeric(CisloStr1) == true){

                CisloInt1 = Integer.parseInt(CisloStr1);

            }

            if (isNumeric(CisloStr2) == true){

                CisloInt2 = Integer.parseInt(CisloStr2);

            }

            

            cislaPopisu[i][0] = CisloInt1;

            cislaPopisu[i][1] = CisloInt2;

            System.out.println("");

        }

        

        return (cislaPopisu);

    }

    

    private int[][] oddelCisloDotazuOdTextuVpravo(){  

        

        String CisloStr1;

        String CisloStr2;

        int CisloInt1 = 0;

        int CisloInt2 = 0;

        

        String[] stringArr;

        int[][] cislaPopisu;

        String DotazPopis;

        

        cislaPopisu = new int[DotazyPopisVpravo.length][2];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVpravo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr1 = stringArr[0];

            CisloStr2 = stringArr[1];

            

            if (isNumeric(CisloStr1) == true){

                CisloInt1 = Integer.parseInt(CisloStr1);

            }

            if (isNumeric(CisloStr2) == true){

                CisloInt2 = Integer.parseInt(CisloStr2);

            }

            

            cislaPopisu[i][0] = CisloInt1;

            cislaPopisu[i][1] = CisloInt2;

            System.out.println("");

        }

        

        return (cislaPopisu);

    }

        preusporadejDataVPravoDo2D();

        

    private void preusporadejDataVPravoDo2D()

    {

        int popis1;

        int popis1Predchozi;

        int popis2;

        

        int radek;

        int sloupec;

        

        String DotazSQLVPravo;

        String DotazPopisVpravo;

        

        cislaPopisuVPravo2D = new int[cislaPopisuVlevo.length][10];

        DotazySQLVpravo2D = new String[DotazySQLVpravo.length][10];

        DotazyPopisVpravo2D = new String[DotazyPopisVpravo.length][10];

        popis1Predchozi = 0;

        

        radek = -1;

        sloupec = 0;

        

        for (int r = 0; r < cislaPopisuVPravo.length; r++) {

            popis1 = cislaPopisuVPravo[r][0];

            popis2 = cislaPopisuVPravo[r][1];

            

            DotazSQLVPravo = DotazySQLVpravo[r];

            DotazPopisVpravo = DotazyPopisVpravo[r];

            

            if (popis1 != popis1Predchozi){

                radek = radek + 1;

                sloupec = 1;

                cislaPopisuVPravo2D[radek][0] = popis1;

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                

                DotazySQLVpravo2D[radek][0] = "" + popis1;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                

                DotazyPopisVpravo2D[radek][0] = "" + popis1;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

                popis1Predchozi = popis1;

                

            } else {

                sloupec = sloupec + 1;

                

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

            }

            

           

        }

    private void preusporadejDataVPravoDo2D()

    {

        int popis1;

        int popis1Predchozi;

        int popis2;

        

        int radek;

        int sloupec;

        

        String DotazSQLVPravo;

        String DotazPopisVpravo;

        

        cislaPopisuVPravo2D = new int[cislaPopisuVlevo.length][10];

        DotazySQLVpravo2D = new String[DotazySQLVpravo.length][10];

        DotazyPopisVpravo2D = new String[DotazyPopisVpravo.length][10];

        popis1Predchozi = 0;

        

        radek = -1;

        sloupec = 0;

        

        for (int r = 0; r < cislaPopisuVPravo.length; r++) {

            popis1 = cislaPopisuVPravo[r][0];

            popis2 = cislaPopisuVPravo[r][1];

            

            DotazSQLVPravo = DotazySQLVpravo[r];

            DotazPopisVpravo = DotazyPopisVpravo[r];

            

            if (popis1 != popis1Predchozi){

                radek = radek + 1;

                sloupec = 1;

                cislaPopisuVPravo2D[radek][0] = popis1;

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                

                DotazySQLVpravo2D[radek][0] = "" + popis1;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                

                DotazyPopisVpravo2D[radek][0] = "" + popis1;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

                popis1Predchozi = popis1;

                

            } else {

                sloupec = sloupec + 1;

                

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

            }

            

           

        }

    private void preusporadejDataVPravoDo2D()

    {

        int popis1;

        int popis1Predchozi;

        int popis2;

        

        int radek;

        int sloupec;

        

        String DotazSQLVPravo;

        String DotazPopisVpravo;

        

        cislaPopisuVPravo2D = new int[cislaPopisuVlevo.length][10];

        DotazySQLVpravo2D = new String[DotazySQLVpravo.length][10];

        DotazyPopisVpravo2D = new String[DotazyPopisVpravo.length][10];

        popis1Predchozi = 0;

        

        radek = -1;

        sloupec = 0;

        

        for (int r = 0; r < cislaPopisuVPravo.length; r++) {

            popis1 = cislaPopisuVPravo[r][0];

            popis2 = cislaPopisuVPravo[r][1];

            

            DotazSQLVPravo = DotazySQLVpravo[r];

            DotazPopisVpravo = DotazyPopisVpravo[r];

            

            if (popis1 != popis1Predchozi){

                radek = radek + 1;

                sloupec = 1;

                cislaPopisuVPravo2D[radek][0] = popis1;

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                

                DotazySQLVpravo2D[radek][0] = "" + popis1;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                

                DotazyPopisVpravo2D[radek][0] = "" + popis1;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

                popis1Predchozi = popis1;

                

            } else {

                sloupec = sloupec + 1;

                

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

            }

            

           

        }

        



    }

    public NactiDotazy() throws IOException{

        

        String Adresa;

        String ZdrojDotazuVlevo;

        String ZdrojDotazuVpravo;

        

        Adresa = "C:\\Users\\jonas\\OneDrive\\Dokumenty\\JAVA\\Pokusy\\DataBase\\EXAMPLES-w3resource\\";

        ZdrojDotazuVlevo = "RetrieveDataFromTablesCZ.txt";

        ZdrojDotazuVpravo = "RetrieveDataFromTablesCZvpravo.txt";

        

        //Provizorne naplnuji pole

        SubDotazyPopis[0][0] = "SubDotazyPopis[0][0]";

        SubDotazyPopis[0][1] = "SubDotazyPopis[0][1]";

        SubDotazyPopis[0][2] = "SubDotazyPopis[0][2]";

        

        SubDotazyPopis[1][0] = "SubDotazyPopis[1][0]";

        SubDotazyPopis[1][1] = "SubDotazyPopis[1][1]";

        SubDotazyPopis[1][2] = "SubDotazyPopis[1][2]";

        

        SubDotazyPopis[2][0] = "SubDotazyPopis[2][0]";

        SubDotazyPopis[2][1] = "SubDotazyPopis[2][1]";

        SubDotazyPopis[2][2] = "SubDotazyPopis[2][2]";

        

        

        //Provizorne naplnuji pole

        SubDotazySQL[0][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[0][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[0][2] = "SELECT pro_name, pro_price FROM item_mast";

        

        SubDotazySQL[1][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[1][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[1][2] = "SELECT pro_name, pro_price FROM item_mast";

        

        SubDotazySQL[2][0] = "SELECT name,city\n FROM salesman";

        SubDotazySQL[2][1] = "SELECT winner\n FROM nobel_win";

        SubDotazySQL[2][2] = "SELECT pro_name, pro_price FROM item_mast";



        //Ziska data vlevo

        vratSQLDotazy(Adresa, ZdrojDotazuVlevo); 

        DotazySQLVlevo = DotazySQL;

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

        DotazyPopisVlevo = DotazyPopis;

        cislaPopisuVlevo = oddelCisloDotazuOdTextuVlevo();

        

    

    private int[] oddelCisloDotazuOdTextuVlevo(){

        

        String CisloStr;

        int CisloInt = 0;

        String[] stringArr;

        int[] cislaPopisu;

        String DotazPopis;

        

        //Oddeli cislo dotazu od textu dotazu

        cislaPopisu = new int[DotazyPopisVlevo.length];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVlevo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr = stringArr[0];

            if (isNumeric(CisloStr) == true){

                CisloInt = Integer.parseInt(CisloStr);

            }

            

            cislaPopisu[i] = CisloInt;

        }

        

        return (cislaPopisu);

        

    }

    

    private int[] oddelCisloDotazuOdTextuVlevo(){

        

        String CisloStr;

        int CisloInt = 0;

        String[] stringArr;

        int[] cislaPopisu;

        String DotazPopis;

        

        //Oddeli cislo dotazu od textu dotazu

        cislaPopisu = new int[DotazyPopisVlevo.length];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVlevo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr = stringArr[0];

            if (isNumeric(CisloStr) == true){

                CisloInt = Integer.parseInt(CisloStr);

            }

            

            cislaPopisu[i] = CisloInt;

        }

        

        return (cislaPopisu);

        

    }

    

    private int[] oddelCisloDotazuOdTextuVlevo(){

        

        String CisloStr;

        int CisloInt = 0;

        String[] stringArr;

        int[] cislaPopisu;

        String DotazPopis;

        

        //Oddeli cislo dotazu od textu dotazu

        cislaPopisu = new int[DotazyPopisVlevo.length];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVlevo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr = stringArr[0];

            if (isNumeric(CisloStr) == true){

                CisloInt = Integer.parseInt(CisloStr);

            }

            

            cislaPopisu[i] = CisloInt;

        }

        

        return (cislaPopisu);

        

    }

        //Ziska data vpravo

        vratSQLDotazy(Adresa, ZdrojDotazuVpravo); 

        DotazySQLVpravo = DotazySQL;

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

    {



        String Radek;

        String PrvniZnak = null;

        boolean jePrvniZnakCislo = false;

        String Dotaz = null;

        

        String[] SeznamRadkuArr;

        

        int prvniRadekDotazu;

        int posledniRadekDotazu;

        String PlnaCesta;

        

        PlnaCesta = Adresa + NazevSouboru;

        SeznamRadkuArr = NactiSoubor(PlnaCesta);

        

        ArrayList<String> DotazyPopisList = new ArrayList<String>();

        ArrayList<String> DotazySQLList = new ArrayList<String>();

        

        for (int i = 0; i < SeznamRadkuArr.length; i++) {

            

            Radek = SeznamRadkuArr[i];

            

            if (Radek.isEmpty() == false)

            {

                PrvniZnak = Radek.substring(0, 1);

                jePrvniZnakCislo = isNumeric(PrvniZnak);

                //Dotaz = "";

                

                if (jePrvniZnakCislo == true)

                {

                    

                    DotazyPopisList.add(Radek);

                    prvniRadekDotazu = i + 1;

                    posledniRadekDotazu = vratPosledniRadekDotazu(prvniRadekDotazu, SeznamRadkuArr);

                    Dotaz = vratStringDotazu(prvniRadekDotazu, posledniRadekDotazu, SeznamRadkuArr);

                    

                    DotazySQLList.add(Dotaz);

                    

                }

            }

        }

        

        //Prekonvertuje na pole Stringu

        DotazyPopis = new String[DotazyPopisList.size()]; 

        DotazyPopis = DotazyPopisList.toArray(DotazyPopis); 

        

        //Prekonvertuje na pole Stringu

        DotazySQL = new String[DotazySQLList.size()]; 

        DotazySQL = DotazySQLList.toArray(DotazySQL); 

        

           

    }

        DotazyPopisVpravo = DotazyPopis;

        cislaPopisuVPravo = oddelCisloDotazuOdTextuVpravo();

        

    

    private int[][] oddelCisloDotazuOdTextuVpravo(){  

        

        String CisloStr1;

        String CisloStr2;

        int CisloInt1 = 0;

        int CisloInt2 = 0;

        

        String[] stringArr;

        int[][] cislaPopisu;

        String DotazPopis;

        

        cislaPopisu = new int[DotazyPopisVpravo.length][2];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVpravo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr1 = stringArr[0];

            CisloStr2 = stringArr[1];

            

            if (isNumeric(CisloStr1) == true){

                CisloInt1 = Integer.parseInt(CisloStr1);

            }

            if (isNumeric(CisloStr2) == true){

                CisloInt2 = Integer.parseInt(CisloStr2);

            }

            

            cislaPopisu[i][0] = CisloInt1;

            cislaPopisu[i][1] = CisloInt2;

            System.out.println("");

        }

        

        return (cislaPopisu);

    }

    

    private int[][] oddelCisloDotazuOdTextuVpravo(){  

        

        String CisloStr1;

        String CisloStr2;

        int CisloInt1 = 0;

        int CisloInt2 = 0;

        

        String[] stringArr;

        int[][] cislaPopisu;

        String DotazPopis;

        

        cislaPopisu = new int[DotazyPopisVpravo.length][2];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVpravo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr1 = stringArr[0];

            CisloStr2 = stringArr[1];

            

            if (isNumeric(CisloStr1) == true){

                CisloInt1 = Integer.parseInt(CisloStr1);

            }

            if (isNumeric(CisloStr2) == true){

                CisloInt2 = Integer.parseInt(CisloStr2);

            }

            

            cislaPopisu[i][0] = CisloInt1;

            cislaPopisu[i][1] = CisloInt2;

            System.out.println("");

        }

        

        return (cislaPopisu);

    }

    

    private int[][] oddelCisloDotazuOdTextuVpravo(){  

        

        String CisloStr1;

        String CisloStr2;

        int CisloInt1 = 0;

        int CisloInt2 = 0;

        

        String[] stringArr;

        int[][] cislaPopisu;

        String DotazPopis;

        

        cislaPopisu = new int[DotazyPopisVpravo.length][2];

        for (int i = 0; i < cislaPopisu.length; i++) { 

            DotazPopis = DotazyPopisVpravo[i];

            

            stringArr = DotazPopis.split("\\.");

            CisloStr1 = stringArr[0];

            CisloStr2 = stringArr[1];

            

            if (isNumeric(CisloStr1) == true){

                CisloInt1 = Integer.parseInt(CisloStr1);

            }

            if (isNumeric(CisloStr2) == true){

                CisloInt2 = Integer.parseInt(CisloStr2);

            }

            

            cislaPopisu[i][0] = CisloInt1;

            cislaPopisu[i][1] = CisloInt2;

            System.out.println("");

        }

        

        return (cislaPopisu);

    }

        preusporadejDataVPravoDo2D();

        

    private void preusporadejDataVPravoDo2D()

    {

        int popis1;

        int popis1Predchozi;

        int popis2;

        

        int radek;

        int sloupec;

        

        String DotazSQLVPravo;

        String DotazPopisVpravo;

        

        cislaPopisuVPravo2D = new int[cislaPopisuVlevo.length][10];

        DotazySQLVpravo2D = new String[DotazySQLVpravo.length][10];

        DotazyPopisVpravo2D = new String[DotazyPopisVpravo.length][10];

        popis1Predchozi = 0;

        

        radek = -1;

        sloupec = 0;

        

        for (int r = 0; r < cislaPopisuVPravo.length; r++) {

            popis1 = cislaPopisuVPravo[r][0];

            popis2 = cislaPopisuVPravo[r][1];

            

            DotazSQLVPravo = DotazySQLVpravo[r];

            DotazPopisVpravo = DotazyPopisVpravo[r];

            

            if (popis1 != popis1Predchozi){

                radek = radek + 1;

                sloupec = 1;

                cislaPopisuVPravo2D[radek][0] = popis1;

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                

                DotazySQLVpravo2D[radek][0] = "" + popis1;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                

                DotazyPopisVpravo2D[radek][0] = "" + popis1;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

                popis1Predchozi = popis1;

                

            } else {

                sloupec = sloupec + 1;

                

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

            }

            

           

        }

    private void preusporadejDataVPravoDo2D()

    {

        int popis1;

        int popis1Predchozi;

        int popis2;

        

        int radek;

        int sloupec;

        

        String DotazSQLVPravo;

        String DotazPopisVpravo;

        

        cislaPopisuVPravo2D = new int[cislaPopisuVlevo.length][10];

        DotazySQLVpravo2D = new String[DotazySQLVpravo.length][10];

        DotazyPopisVpravo2D = new String[DotazyPopisVpravo.length][10];

        popis1Predchozi = 0;

        

        radek = -1;

        sloupec = 0;

        

        for (int r = 0; r < cislaPopisuVPravo.length; r++) {

            popis1 = cislaPopisuVPravo[r][0];

            popis2 = cislaPopisuVPravo[r][1];

            

            DotazSQLVPravo = DotazySQLVpravo[r];

            DotazPopisVpravo = DotazyPopisVpravo[r];

            

            if (popis1 != popis1Predchozi){

                radek = radek + 1;

                sloupec = 1;

                cislaPopisuVPravo2D[radek][0] = popis1;

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                

                DotazySQLVpravo2D[radek][0] = "" + popis1;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                

                DotazyPopisVpravo2D[radek][0] = "" + popis1;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

                popis1Predchozi = popis1;

                

            } else {

                sloupec = sloupec + 1;

                

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

            }

            

           

        }

    private void preusporadejDataVPravoDo2D()

    {

        int popis1;

        int popis1Predchozi;

        int popis2;

        

        int radek;

        int sloupec;

        

        String DotazSQLVPravo;

        String DotazPopisVpravo;

        

        cislaPopisuVPravo2D = new int[cislaPopisuVlevo.length][10];

        DotazySQLVpravo2D = new String[DotazySQLVpravo.length][10];

        DotazyPopisVpravo2D = new String[DotazyPopisVpravo.length][10];

        popis1Predchozi = 0;

        

        radek = -1;

        sloupec = 0;

        

        for (int r = 0; r < cislaPopisuVPravo.length; r++) {

            popis1 = cislaPopisuVPravo[r][0];

            popis2 = cislaPopisuVPravo[r][1];

            

            DotazSQLVPravo = DotazySQLVpravo[r];

            DotazPopisVpravo = DotazyPopisVpravo[r];

            

            if (popis1 != popis1Predchozi){

                radek = radek + 1;

                sloupec = 1;

                cislaPopisuVPravo2D[radek][0] = popis1;

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                

                DotazySQLVpravo2D[radek][0] = "" + popis1;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                

                DotazyPopisVpravo2D[radek][0] = "" + popis1;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

                popis1Predchozi = popis1;

                

            } else {

                sloupec = sloupec + 1;

                

                cislaPopisuVPravo2D[radek][sloupec] = popis2;

                DotazySQLVpravo2D[radek][sloupec] = DotazSQLVPravo;

                DotazyPopisVpravo2D[radek][sloupec] = DotazPopisVpravo;

                

            }

            

           

        }

        



    }

                DotazySQL = DotazyzTxt.getDotazySQL();

                DotazyPopis = DotazyzTxt.getDotazyPopis();

    public String[] getDotazyPopis()

    {

        return(DotazyPopisVlevo);

    }  

    {

        return(DotazyPopisVlevo);

    }  

    public String[] getDotazyPopis()

    {

        return(DotazyPopisVlevo);

    }  

    {

        return(DotazyPopisVlevo);

    }  

    public String[] getDotazyPopis()

    {

        return(DotazyPopisVlevo);

    }  

    {

        return(DotazyPopisVlevo);

    }  

                

               // cislaPopisu = DotazyzTxt.getCislaPopisu();

                SubDotazySQL = DotazyzTxt.getSubDotazySQL();

                SubDotazyPopis = DotazyzTxt.getSubDotazyPopis();

    public String[][] getSubDotazyPopis()

    {

        return(DotazyPopisVpravo2D);

        //return(SubDotazyPopis);

    } 

    {

        return(DotazyPopisVpravo2D);

        //return(SubDotazyPopis);

    } 

    public String[][] getSubDotazyPopis()

    {

        return(DotazyPopisVpravo2D);

        //return(SubDotazyPopis);

    } 

    {

        return(DotazyPopisVpravo2D);

        //return(SubDotazyPopis);

    } 

    public String[][] getSubDotazyPopis()

    {

        return(DotazyPopisVpravo2D);

        //return(SubDotazyPopis);

    } 

    {

        return(DotazyPopisVpravo2D);

        //return(SubDotazyPopis);

    } 

                

                //vytvori novou databazi, tak ze odstrani tabulky stare a vlozi nove

                VytvorDB NovaDB = new VytvorDB();

                

    public VytvorDB() throws IOException, ClassNotFoundException, SQLException{

        

        String QueryCreateTable;

        String AdresaKTabulce;

        

        String NazvyTabulek[];

        String NazevTabulky;

        

        

        //Dropne vsechny tabulky

        DropTable Drop = new DropTable();

        

    DropTable() throws SQLException, ClassNotFoundException{

        

        String[] seznamTabulek;

        

        //Registering the driver

        Class.forName("org.apache.derby.jdbc.EmbeddedDriver");

        conn = DriverManager.getConnection("jdbc:derby://localhost:1527/SimpleDBDemo", "demo", "demo");

      

        //Creating the Statement object

        stmt = conn.createStatement();

 

        

        seznamTabulek = VratSeznamTabulek();

        DropniTabulky(seznamTabulek);

    

    private void DropniTabulky(String[]NazvyTabulek){



        String query;

        String NazevTabulky;

                

        for (int i = 0; i < NazvyTabulek.length; i++) {

             

            NazevTabulky = NazvyTabulek[i];

            query = "DROP TABLE " + NazevTabulky;

             

            try {

            stmt.execute(query);

            } catch (Exception e) {

                System.out.println(e);

            }

             

        }

     

    }

        AdresaKTabulce = "C:\\Users\\jonas\\OneDrive\\Dokumenty\\JAVA\\Pokusy\\DataBase\\DataBase-Zdroje\\";

        

        //Pripravi seznam tabulek podle nazvu txt ve slozce

        NazvyTabulek = SeznamTabulekZTxt(AdresaKTabulce);

        

    

    private String[] SeznamTabulekZTxt(String AdresaKTabulce) throws IOException {

        

        String ObsahSlozky[];

        String NazevSouboru;

        String NazevTabulky = null;

        int indexOfPripony;

        

        ObsahSlozky = VratObsahSlozky(AdresaKTabulce);

        

        ArrayList<String> NazvyTabulek = new ArrayList<String>();

        

        //Jen ty soubory s priponou txt vypise jako Tabulky

        for (int i = 0; i < ObsahSlozky.length; i++) {

            NazevSouboru = ObsahSlozky[i];

            indexOfPripony = NazevSouboru.indexOf(".txt");

            if (indexOfPripony > -1)

            {

                NazevTabulky = NazevSouboru.substring(0, indexOfPripony);

                NazvyTabulek.add(NazevTabulky);

            }

        }

        

        //Preverde ArrayList na pole

        String[] NazvyTabulekArr = new String[NazvyTabulek.size()]; 

        NazvyTabulekArr = NazvyTabulek.toArray(NazvyTabulekArr); 

        

        return NazvyTabulekArr;

        

    }

        //Vytvori jednotlive tabulky

        for (int i = 0; i < NazvyTabulek.length; i++) {

            NazevTabulky = NazvyTabulek[i];

            PridejTabulkuDoDB(AdresaKTabulce, NazevTabulky);

        }

    private void PridejTabulkuDoDB(String AdresaKTabulce, String NazevTabulky) throws SQLException, ClassNotFoundException, IOException

    {

        

        //nacte data z txt

        NactiData Data = new NactiData(NazevTabulky, AdresaKTabulce);

        

        HlavickaTabulky = Data.getTabulkaHlavicka();

        DataTabulky = Data.getTabulkaData();

    private int pocetMoznosti;      //udava pocet moznosti subdotazu (velikost comboboxu)

    private JScrollPane jsp;

    

//    JText textPane = new JTextPane();

//    textPane.setText( "This is regular text"");

    private int poradiSubDotazu;    //aktualne vybrany index v Comboboxu

    

    private AbstractDocument doc;

        DatoveTypySloupcu = Data.getDatoveTypySloupcu();

        

        //Dropne vsechny jiz existujici tabulky

        //DropTable Drop = new DropTable();

        

        //vytvori tabulku v DB

        CreateTable VytvorTabulku = new CreateTable(HlavickaTabulky, DatoveTypySloupcu, NazevTabulky);

        

        //vlozi vsechny radky do tabulky

        pridejRadek vsechnyNoveRadky = new pridejRadek(NazevTabulky,DatoveTypySloupcu, DataTabulky, HlavickaTabulky);

        

    }

    

    }

    public VytvorDB() throws IOException, ClassNotFoundException, SQLException{

        

        String QueryCreateTable;

        String AdresaKTabulce;

        

        String NazvyTabulek[];

        String NazevTabulky;

        

        

        //Dropne vsechny tabulky

        DropTable Drop = new DropTable();

        

    DropTable() throws SQLException, ClassNotFoundException{

        

        String[] seznamTabulek;

        

        //Registering the driver

        Class.forName("org.apache.derby.jdbc.EmbeddedDriver");

        conn = DriverManager.getConnection("jdbc:derby://localhost:1527/SimpleDBDemo", "demo", "demo");

      

        //Creating the Statement object

        stmt = conn.createStatement();

 

        

        seznamTabulek = VratSeznamTabulek();

        DropniTabulky(seznamTabulek);

    

    private void DropniTabulky(String[]NazvyTabulek){



        String query;

        String NazevTabulky;

                

        for (int i = 0; i < NazvyTabulek.length; i++) {

             

            NazevTabulky = NazvyTabulek[i];

            query = "DROP TABLE " + NazevTabulky;

             

            try {

            stmt.execute(query);

            } catch (Exception e) {

                System.out.println(e);

            }

             

        }

     

    }

    DropTable() throws SQLException, ClassNotFoundException{

        

        String[] seznamTabulek;

        

        //Registering the driver

        Class.forName("org.apache.derby.jdbc.EmbeddedDriver");

        conn = DriverManager.getConnection("jdbc:derby://localhost:1527/SimpleDBDemo", "demo", "demo");

      

        //Creating the Statement object

        stmt = conn.createStatement();

 

        

        seznamTabulek = VratSeznamTabulek();

        DropniTabulky(seznamTabulek);

    

    private void DropniTabulky(String[]NazvyTabulek){



        String query;

        String NazevTabulky;

                

        for (int i = 0; i < NazvyTabulek.length; i++) {

             

            NazevTabulky = NazvyTabulek[i];

            query = "DROP TABLE " + NazevTabulky;

             

            try {

            stmt.execute(query);

            } catch (Exception e) {

                System.out.println(e);

            }

             

        }

    

    private void DropniTabulky(String[]NazvyTabulek){



        String query;

        String NazevTabulky;

                

        for (int i = 0; i < NazvyTabulek.length; i++) {

             

            NazevTabulky = NazvyTabulek[i];

            query = "DROP TABLE " + NazevTabulky;

             

            try {

            stmt.execute(query);

            } catch (Exception e) {

                System.out.println(e);

            }

             

        }

     

    }

        AdresaKTabulce = "C:\\Users\\jonas\\OneDrive\\Dokumenty\\JAVA\\Pokusy\\DataBase\\DataBase-Zdroje\\";

        

        //Pripravi seznam tabulek podle nazvu txt ve slozce

        NazvyTabulek = SeznamTabulekZTxt(AdresaKTabulce);

        

    

    private String[] SeznamTabulekZTxt(String AdresaKTabulce) throws IOException {

        

        String ObsahSlozky[];

        String NazevSouboru;

        String NazevTabulky = null;

        int indexOfPripony;

        

        ObsahSlozky = VratObsahSlozky(AdresaKTabulce);

        

        ArrayList<String> NazvyTabulek = new ArrayList<String>();

        

        //Jen ty soubory s priponou txt vypise jako Tabulky

        for (int i = 0; i < ObsahSlozky.length; i++) {

            NazevSouboru = ObsahSlozky[i];

            indexOfPripony = NazevSouboru.indexOf(".txt");

            if (indexOfPripony > -1)

            {

                NazevTabulky = NazevSouboru.substring(0, indexOfPripony);

                NazvyTabulek.add(NazevTabulky);

            }

        }

        

        //Preverde ArrayList na pole

        String[] NazvyTabulekArr = new String[NazvyTabulek.size()]; 

        NazvyTabulekArr = NazvyTabulek.toArray(NazvyTabulekArr); 

        

        return NazvyTabulekArr;

        

    }

    

    private String[] SeznamTabulekZTxt(String AdresaKTabulce) throws IOException {

        

        String ObsahSlozky[];

        String NazevSouboru;

        String NazevTabulky = null;

        int indexOfPripony;

        

        ObsahSlozky = VratObsahSlozky(AdresaKTabulce);

        

        ArrayList<String> NazvyTabulek = new ArrayList<String>();

        

        //Jen ty soubory s priponou txt vypise jako Tabulky

        for (int i = 0; i < ObsahSlozky.length; i++) {

            NazevSouboru = ObsahSlozky[i];

            indexOfPripony = NazevSouboru.indexOf(".txt");

            if (indexOfPripony > -1)

            {

                NazevTabulky = NazevSouboru.substring(0, indexOfPripony);

                NazvyTabulek.add(NazevTabulky);

            }

        }

        

        //Preverde ArrayList na pole

        String[] NazvyTabulekArr = new String[NazvyTabulek.size()]; 

        NazvyTabulekArr = NazvyTabulek.toArray(NazvyTabulekArr); 

        

        return NazvyTabulekArr;

        

    }

        //Vytvori jednotlive tabulky

        for (int i = 0; i < NazvyTabulek.length; i++) {

            NazevTabulky = NazvyTabulek[i];

            PridejTabulkuDoDB(AdresaKTabulce, NazevTabulky);

        }

    private void PridejTabulkuDoDB(String AdresaKTabulce, String NazevTabulky) throws SQLException, ClassNotFoundException, IOException

    {

        

        //nacte data z txt

        NactiData Data = new NactiData(NazevTabulky, AdresaKTabulce);

        

        HlavickaTabulky = Data.getTabulkaHlavicka();

        DataTabulky = Data.getTabulkaData();

    private int pocetMoznosti;      //udava pocet moznosti subdotazu (velikost comboboxu)

    private JScrollPane jsp;

    

//    JText textPane = new JTextPane();

//    textPane.setText( "This is regular text"");

    private int poradiSubDotazu;    //aktualne vybrany index v Comboboxu

    

    private AbstractDocument doc;

        DatoveTypySloupcu = Data.getDatoveTypySloupcu();

        

        //Dropne vsechny jiz existujici tabulky

        //DropTable Drop = new DropTable();

        

        //vytvori tabulku v DB

        CreateTable VytvorTabulku = new CreateTable(HlavickaTabulky, DatoveTypySloupcu, NazevTabulky);

        

        //vlozi vsechny radky do tabulky

        pridejRadek vsechnyNoveRadky = new pridejRadek(NazevTabulky,DatoveTypySloupcu, DataTabulky, HlavickaTabulky);

        

    }

    private void PridejTabulkuDoDB(String AdresaKTabulce, String NazevTabulky) throws SQLException, ClassNotFoundException, IOException

    {

        

        //nacte data z txt

        NactiData Data = new NactiData(NazevTabulky, AdresaKTabulce);

        

        HlavickaTabulky = Data.getTabulkaHlavicka();

        DataTabulky = Data.getTabulkaData();

    private int pocetMoznosti;      //udava pocet moznosti subdotazu (velikost comboboxu)

    private JScrollPane jsp;

    

//    JText textPane = new JTextPane();

//    textPane.setText( "This is regular text"");

    private int poradiSubDotazu;    //aktualne vybrany index v Comboboxu

    

    private AbstractDocument doc;

    private int pocetMoznosti;      //udava pocet moznosti subdotazu (velikost comboboxu)

    private JScrollPane jsp;

    

//    JText textPane = new JTextPane();

//    textPane.setText( "This is regular text"");

    private int poradiSubDotazu;    //aktualne vybrany index v Comboboxu

    

    private AbstractDocument doc;

        DatoveTypySloupcu = Data.getDatoveTypySloupcu();

        

        //Dropne vsechny jiz existujici tabulky

        //DropTable Drop = new DropTable();

        

        //vytvori tabulku v DB

        CreateTable VytvorTabulku = new CreateTable(HlavickaTabulky, DatoveTypySloupcu, NazevTabulky);

        

        //vlozi vsechny radky do tabulky

        pridejRadek vsechnyNoveRadky = new pridejRadek(NazevTabulky,DatoveTypySloupcu, DataTabulky, HlavickaTabulky);

        

    }

    

    }

    public VytvorDB() throws IOException, ClassNotFoundException, SQLException{

        

        String QueryCreateTable;

        String AdresaKTabulce;

        

        String NazvyTabulek[];

        String NazevTabulky;

        

        

        //Dropne vsechny tabulky

        DropTable Drop = new DropTable();

        

    DropTable() throws SQLException, ClassNotFoundException{

        

        String[] seznamTabulek;

        

        //Registering the driver

        Class.forName("org.apache.derby.jdbc.EmbeddedDriver");

        conn = DriverManager.getConnection("jdbc:derby://localhost:1527/SimpleDBDemo", "demo", "demo");

      

        //Creating the Statement object

        stmt = conn.createStatement();

 

        

        seznamTabulek = VratSeznamTabulek();

        DropniTabulky(seznamTabulek);

    

    private void DropniTabulky(String[]NazvyTabulek){



        String query;

        String NazevTabulky;

                

        for (int i = 0; i < NazvyTabulek.length; i++) {

             

            NazevTabulky = NazvyTabulek[i];

            query = "DROP TABLE " + NazevTabulky;

             

            try {

            stmt.execute(query);

            } catch (Exception e) {

                System.out.println(e);

            }

             

        }

     

    }

    DropTable() throws SQLException, ClassNotFoundException{

        

        String[] seznamTabulek;

        

        //Registering the driver

        Class.forName("org.apache.derby.jdbc.EmbeddedDriver");

        conn = DriverManager.getConnection("jdbc:derby://localhost:1527/SimpleDBDemo", "demo", "demo");

      

        //Creating the Statement object

        stmt = conn.createStatement();

 

        

        seznamTabulek = VratSeznamTabulek();

        DropniTabulky(seznamTabulek);

    

    private void DropniTabulky(String[]NazvyTabulek){



        String query;

        String NazevTabulky;

                

        for (int i = 0; i < NazvyTabulek.length; i++) {

             

            NazevTabulky = NazvyTabulek[i];

            query = "DROP TABLE " + NazevTabulky;

             

            try {

            stmt.execute(query);

            } catch (Exception e) {

                System.out.println(e);

            }

             

        }

    

    private void DropniTabulky(String[]NazvyTabulek){



        String query;

        String NazevTabulky;

                

        for (int i = 0; i < NazvyTabulek.length; i++) {

             

            NazevTabulky = NazvyTabulek[i];

            query = "DROP TABLE " + NazevTabulky;

             

            try {

            stmt.execute(query);

            } catch (Exception e) {

                System.out.println(e);

            }

             

        }

     

    }

    DropTable() throws SQLException, ClassNotFoundException{

        

        String[] seznamTabulek;

        

        //Registering the driver

        Class.forName("org.apache.derby.jdbc.EmbeddedDriver");

        conn = DriverManager.getConnection("jdbc:derby://localhost:1527/SimpleDBDemo", "demo", "demo");

      

        //Creating the Statement object

        stmt = conn.createStatement();

 

        

        seznamTabulek = VratSeznamTabulek();

        DropniTabulky(seznamTabulek);

    

    private void DropniTabulky(String[]NazvyTabulek){



        String query;

        String NazevTabulky;

                

        for (int i = 0; i < NazvyTabulek.length; i++) {

             

            NazevTabulky = NazvyTabulek[i];

            query = "DROP TABLE " + NazevTabulky;

             

            try {

            stmt.execute(query);

            } catch (Exception e) {

                System.out.println(e);

            }

             

        }

    

    private void DropniTabulky(String[]NazvyTabulek){



        String query;

        String NazevTabulky;

                

        for (int i = 0; i < NazvyTabulek.length; i++) {

             

            NazevTabulky = NazvyTabulek[i];

            query = "DROP TABLE " + NazevTabulky;

             

            try {

            stmt.execute(query);

            } catch (Exception e) {

                System.out.println(e);

            }

             

        }

    

    private void DropniTabulky(String[]NazvyTabulek){



        String query;

        String NazevTabulky;

                

        for (int i = 0; i < NazvyTabulek.length; i++) {

             

            NazevTabulky = NazvyTabulek[i];

            query = "DROP TABLE " + NazevTabulky;

             

            try {

            stmt.execute(query);

            } catch (Exception e) {

                System.out.println(e);

            }

             

        }

     

    }

        AdresaKTabulce = "C:\\Users\\jonas\\OneDrive\\Dokumenty\\JAVA\\Pokusy\\DataBase\\DataBase-Zdroje\\";

        

        //Pripravi seznam tabulek podle nazvu txt ve slozce

        NazvyTabulek = SeznamTabulekZTxt(AdresaKTabulce);

        

    

    private String[] SeznamTabulekZTxt(String AdresaKTabulce) throws IOException {

        

        String ObsahSlozky[];

        String NazevSouboru;

        String NazevTabulky = null;

        int indexOfPripony;

        

        ObsahSlozky = VratObsahSlozky(AdresaKTabulce);

        

        ArrayList<String> NazvyTabulek = new ArrayList<String>();

        

        //Jen ty soubory s priponou txt vypise jako Tabulky

        for (int i = 0; i < ObsahSlozky.length; i++) {

            NazevSouboru = ObsahSlozky[i];

            indexOfPripony = NazevSouboru.indexOf(".txt");

            if (indexOfPripony > -1)

            {

                NazevTabulky = NazevSouboru.substring(0, indexOfPripony);

                NazvyTabulek.add(NazevTabulky);

            }

        }

        

        //Preverde ArrayList na pole

        String[] NazvyTabulekArr = new String[NazvyTabulek.size()]; 

        NazvyTabulekArr = NazvyTabulek.toArray(NazvyTabulekArr); 

        

        return NazvyTabulekArr;

        

    }

    

    private String[] SeznamTabulekZTxt(String AdresaKTabulce) throws IOException {

        

        String ObsahSlozky[];

        String NazevSouboru;

        String NazevTabulky = null;

        int indexOfPripony;

        

        ObsahSlozky = VratObsahSlozky(AdresaKTabulce);

        

        ArrayList<String> NazvyTabulek = new ArrayList<String>();

        

        //Jen ty soubory s priponou txt vypise jako Tabulky

        for (int i = 0; i < ObsahSlozky.length; i++) {

            NazevSouboru = ObsahSlozky[i];

            indexOfPripony = NazevSouboru.indexOf(".txt");

            if (indexOfPripony > -1)

            {

                NazevTabulky = NazevSouboru.substring(0, indexOfPripony);

                NazvyTabulek.add(NazevTabulky);

            }

        }

        

        //Preverde ArrayList na pole

        String[] NazvyTabulekArr = new String[NazvyTabulek.size()]; 

        NazvyTabulekArr = NazvyTabulek.toArray(NazvyTabulekArr); 

        

        return NazvyTabulekArr;

        

    }

    

    private String[] SeznamTabulekZTxt(String AdresaKTabulce) throws IOException {

        

        String ObsahSlozky[];

        String NazevSouboru;

        String NazevTabulky = null;

        int indexOfPripony;

        

        ObsahSlozky = VratObsahSlozky(AdresaKTabulce);

        

        ArrayList<String> NazvyTabulek = new ArrayList<String>();

        

        //Jen ty soubory s priponou txt vypise jako Tabulky

        for (int i = 0; i < ObsahSlozky.length; i++) {

            NazevSouboru = ObsahSlozky[i];

            indexOfPripony = NazevSouboru.indexOf(".txt");

            if (indexOfPripony > -1)

            {

                NazevTabulky = NazevSouboru.substring(0, indexOfPripony);

                NazvyTabulek.add(NazevTabulky);

            }

        }

        

        //Preverde ArrayList na pole

        String[] NazvyTabulekArr = new String[NazvyTabulek.size()]; 

        NazvyTabulekArr = NazvyTabulek.toArray(NazvyTabulekArr); 

        

        return NazvyTabulekArr;

        

    }

        //Vytvori jednotlive tabulky

        for (int i = 0; i < NazvyTabulek.length; i++) {

            NazevTabulky = NazvyTabulek[i];

            PridejTabulkuDoDB(AdresaKTabulce, NazevTabulky);

        }

    private void PridejTabulkuDoDB(String AdresaKTabulce, String NazevTabulky) throws SQLException, ClassNotFoundException, IOException

    {

        

        //nacte data z txt

        NactiData Data = new NactiData(NazevTabulky, AdresaKTabulce);

        

        HlavickaTabulky = Data.getTabulkaHlavicka();

        DataTabulky = Data.getTabulkaData();

    private int pocetMoznosti;      //udava pocet moznosti subdotazu (velikost comboboxu)

    private JScrollPane jsp;

    

//    JText textPane = new JTextPane();

//    textPane.setText( "This is regular text"");

    private int poradiSubDotazu;    //aktualne vybrany index v Comboboxu

    

    private AbstractDocument doc;

        DatoveTypySloupcu = Data.getDatoveTypySloupcu();

        

        //Dropne vsechny jiz existujici tabulky

        //DropTable Drop = new DropTable();

        

        //vytvori tabulku v DB

        CreateTable VytvorTabulku = new CreateTable(HlavickaTabulky, DatoveTypySloupcu, NazevTabulky);

        

        //vlozi vsechny radky do tabulky

        pridejRadek vsechnyNoveRadky = new pridejRadek(NazevTabulky,DatoveTypySloupcu, DataTabulky, HlavickaTabulky);

        

    }

    private void PridejTabulkuDoDB(String AdresaKTabulce, String NazevTabulky) throws SQLException, ClassNotFoundException, IOException

    {

        

        //nacte data z txt

        NactiData Data = new NactiData(NazevTabulky, AdresaKTabulce);

        

        HlavickaTabulky = Data.getTabulkaHlavicka();

        DataTabulky = Data.getTabulkaData();

    private int pocetMoznosti;      //udava pocet moznosti subdotazu (velikost comboboxu)

    private JScrollPane jsp;

    

//    JText textPane = new JTextPane();

//    textPane.setText( "This is regular text"");

    private int poradiSubDotazu;    //aktualne vybrany index v Comboboxu

    

    private AbstractDocument doc;

    private int pocetMoznosti;      //udava pocet moznosti subdotazu (velikost comboboxu)

    private JScrollPane jsp;

    

//    JText textPane = new JTextPane();

//    textPane.setText( "This is regular text"");

    private int poradiSubDotazu;    //aktualne vybrany index v Comboboxu

    

    private AbstractDocument doc;

        DatoveTypySloupcu = Data.getDatoveTypySloupcu();

        

        //Dropne vsechny jiz existujici tabulky

        //DropTable Drop = new DropTable();

        

        //vytvori tabulku v DB

        CreateTable VytvorTabulku = new CreateTable(HlavickaTabulky, DatoveTypySloupcu, NazevTabulky);

        

        //vlozi vsechny radky do tabulky

        pridejRadek vsechnyNoveRadky = new pridejRadek(NazevTabulky,DatoveTypySloupcu, DataTabulky, HlavickaTabulky);

        

    }

    private void PridejTabulkuDoDB(String AdresaKTabulce, String NazevTabulky) throws SQLException, ClassNotFoundException, IOException

    {

        

        //nacte data z txt

        NactiData Data = new NactiData(NazevTabulky, AdresaKTabulce);

        

        HlavickaTabulky = Data.getTabulkaHlavicka();

        DataTabulky = Data.getTabulkaData();

    private int pocetMoznosti;      //udava pocet moznosti subdotazu (velikost comboboxu)

    private JScrollPane jsp;

    

//    JText textPane = new JTextPane();

//    textPane.setText( "This is regular text"");

    private int poradiSubDotazu;    //aktualne vybrany index v Comboboxu

    

    private AbstractDocument doc;

    private int pocetMoznosti;      //udava pocet moznosti subdotazu (velikost comboboxu)

    private JScrollPane jsp;

    

//    JText textPane = new JTextPane();

//    textPane.setText( "This is regular text"");

    private int poradiSubDotazu;    //aktualne vybrany index v Comboboxu

    

    private AbstractDocument doc;

    private int pocetMoznosti;      //udava pocet moznosti subdotazu (velikost comboboxu)

    private JScrollPane jsp;

    

//    JText textPane = new JTextPane();

//    textPane.setText( "This is regular text"");

    private int poradiSubDotazu;    //aktualne vybrany index v Comboboxu

    

    private AbstractDocument doc;

        DatoveTypySloupcu = Data.getDatoveTypySloupcu();

        

        //Dropne vsechny jiz existujici tabulky

        //DropTable Drop = new DropTable();

        

        //vytvori tabulku v DB

        CreateTable VytvorTabulku = new CreateTable(HlavickaTabulky, DatoveTypySloupcu, NazevTabulky);

        

        //vlozi vsechny radky do tabulky

        pridejRadek vsechnyNoveRadky = new pridejRadek(NazevTabulky,DatoveTypySloupcu, DataTabulky, HlavickaTabulky);

        

    }

    

    }

                //nastavi vychozi hodnoty, podle toho o jaky vyber se jedna

                nejUzsiVyber = true;

                stredniVyber = false;

                nejsirsiVyber = false;

                

                //Nastavi ze tlacitko jiz bylo stlaceno

                prvniStisknutiTlacitka = false; //indikuje, ze tlacitko jiz bylo spusteno

       

            }

           

            vyberDotazVlevo = vyberDotazVlevo + 1;

            poradiSubDotazu = 1; 

            SelectVlevo = true;

            vratPocetMoznosti();

           

    private void vratPocetMoznosti(){

        

        String hodnota;

        

        for(int i = 0; i < SubDotazySQL[0].length; i++) {

            hodnota = SubDotazySQL[vyberDotazVlevo][i];

            if (hodnota == null){

                //ulozi pocet moznosti do promenne ve tride

                pocetMoznosti = i;

                break;

            }

        }

        

    }

    private void vratPocetMoznosti(){

        

        String hodnota;

        

        for(int i = 0; i < SubDotazySQL[0].length; i++) {

            hodnota = SubDotazySQL[vyberDotazVlevo][i];

            if (hodnota == null){

                //ulozi pocet moznosti do promenne ve tride

                pocetMoznosti = i;

                break;

            }

        }

        

    }

    private void vratPocetMoznosti(){

        

        String hodnota;

        

        for(int i = 0; i < SubDotazySQL[0].length; i++) {

            hodnota = SubDotazySQL[vyberDotazVlevo][i];

            if (hodnota == null){

                //ulozi pocet moznosti do promenne ve tride

                pocetMoznosti = i;

                break;

            }

        }

        

    }

            zobrazSelectVJTextArea();

            vymazHodnotyVpravo();

    //Vymazou se data v polich a popisu, pokud kliknu na >> nebo <<

    private void vymazHodnotyVpravo(){

        

        popisVpravoTArea.setText("");

        SQLVpravoTArea.setText("");

        VysledekVpravoTPane.setText("");

        

    }

    private void vymazHodnotyVpravo(){

        

        popisVpravoTArea.setText("");

        SQLVpravoTArea.setText("");

        VysledekVpravoTPane.setText("");

        

    }

    //Vymazou se data v polich a popisu, pokud kliknu na >> nebo <<

    private void vymazHodnotyVpravo(){

        

        popisVpravoTArea.setText("");

        SQLVpravoTArea.setText("");

        VysledekVpravoTPane.setText("");

        

    }

    private void vymazHodnotyVpravo(){

        

        popisVpravoTArea.setText("");

        SQLVpravoTArea.setText("");

        VysledekVpravoTPane.setText("");

        

    }

    //Vymazou se data v polich a popisu, pokud kliknu na >> nebo <<

    private void vymazHodnotyVpravo(){

        

        popisVpravoTArea.setText("");

        SQLVpravoTArea.setText("");

        VysledekVpravoTPane.setText("");

        

    }

    private void vymazHodnotyVpravo(){

        

        popisVpravoTArea.setText("");

        SQLVpravoTArea.setText("");

        VysledekVpravoTPane.setText("");

        

    }

            jComboBox1.setSelectedIndex(0);

            

        } catch (SQLException ex) {

            Logger.getLogger(SQL_GUI_Frame.class.getName()).log(Level.SEVERE, null, ex);

        } catch (ClassNotFoundException ex) {

