public class TextReader {

  

    public static void main(String[] args) throws IOException {

        

       String adresaSlozkyABC;

       String[] nazvySouboruABC;

       

       String adresaSlozkyData;

       String nazevSouboruData;

       

       String adresaProjektu;

       

       pathOfProject cestaKProjektu = new pathOfProject();

    

    String adresaProjektu;

    

    

    public pathOfProject(){

        

        File currentDirFile = new File(".");

        String helper;

        String helper2;

        

        int lastSlash;

                

        helper = currentDirFile.getAbsolutePath();

      

        lastSlash = helper.lastIndexOf("\\");

        helper2 = helper.substring(0, lastSlash);

        

        lastSlash = helper2.lastIndexOf("\\");

        adresaProjektu = helper2.substring(0, lastSlash);

        

    }

    

    public String getAdresaProjektu(){

        return(adresaProjektu);

    }

    

       adresaProjektu = cestaKProjektu.getAdresaProjektu();

    public String getAdresaProjektu(){

        return(adresaProjektu);

    }

    

       

       //data pismen abecedy

       ArrayList<ArrayList<HashMap<String, Integer>>> MapaPismenAbeceda = new ArrayList<ArrayList<HashMap<String, Integer>>>();

       

       //data pismen zkoumaneho obrazku

       ArrayList<ArrayList<ArrayList<HashMap<String, Integer>>>> MapaVsechPismenNaVsechRadcich = new ArrayList<ArrayList<ArrayList<HashMap<String, Integer>>>>();

       

       //data obdsahuji posouzeni vsech pismen vsech radku z obrazku vuci vsem pismenum abecedy

       ArrayList<ArrayList<ArrayList<HashMap<String, Double>>>> posouzeniPismenePngVsechRadkuKeVsemPismenABC = new ArrayList<ArrayList<ArrayList<HashMap<String, Double>>>>();

       

       //obshuje pole pismen v celem obrazku - radcich + sloupcich

       ArrayList<ArrayList<String>> pismenaVPng = new ArrayList<ArrayList<String>>();

       

       

        

       //inicializuje tridu

       SouradniceSkupinyPismen SouradnicePismena = new SouradniceSkupinyPismen();

       

       //ziska vstupni data originalni pro porovnavani

       zdrojDataAbeceda dataAbecedy = new zdrojDataAbeceda(adresaProjektu);

public class zdrojDataAbeceda {

    

    String adresaSlozky;

    String[] NazvySouboruPng = new String[26];

    

    public zdrojDataAbeceda(String adresaProjektu){

        

        //adresaSlozky = "C:\\Users\\jonas\\OneDrive\\Dokumenty\\JAVA_KCT\\TextReader\\TextReader\\data\\";

        adresaSlozky = adresaProjektu + "\\InputOutput\\srcLetters\\";

        

        NazvySouboruPng[0] = "a.png";

        NazvySouboruPng[1] = "b.png";

        NazvySouboruPng[2] = "c.png";

        NazvySouboruPng[3] = "d.png";

        NazvySouboruPng[4] = "e.png";

        NazvySouboruPng[5] = "f.png";

        NazvySouboruPng[6] = "g.png";

        NazvySouboruPng[7] = "h.png";

        NazvySouboruPng[8] = "i.png";

        NazvySouboruPng[9] = "j.png";

        NazvySouboruPng[10] = "k.png";

        NazvySouboruPng[11] = "l.png";

        NazvySouboruPng[12] = "m.png";

        NazvySouboruPng[13] = "n.png";

        NazvySouboruPng[14] = "o.png";

        NazvySouboruPng[15] = "p.png";

        NazvySouboruPng[16] = "q.png";

        NazvySouboruPng[17] = "r.png";

        NazvySouboruPng[18] = "s.png";

        NazvySouboruPng[19] = "t.png";

        NazvySouboruPng[20] = "u.png";

        NazvySouboruPng[21] = "v.png";

        NazvySouboruPng[22] = "w.png";

        NazvySouboruPng[23] = "x.png";

        NazvySouboruPng[24] = "y.png";

        NazvySouboruPng[25] = "z.png";

        

    }

    

    public String getAdresaSlozky(){

        

        return (adresaSlozky);

        

    }

    

    public String[] getNazvySouboruPng(){

        

        return (NazvySouboruPng);

        

    }

    

       SouradnicePismena.nactiDataAbecedy(dataAbecedy.getAdresaSlozky(), dataAbecedy.getNazvySouboruPng()); 

    public void nactiDataAbecedy(String adresaSlozky, String[] NazvySouboruPng) throws IOException{

        

        String nazevZdrojPng;

        String celaAdresaZdrojPng;

        

        NactiPng novyObrazek;

        

        ArrayList<HashMap<String, Integer>> souradniceVsechBarevObrazku;

        ArrayList<HashMap<String, Integer>> souradniceObrazkuModifikovane = new ArrayList<HashMap<String, Integer>>();

        

        for (int i = 0; i < NazvySouboruPng.length; i++) {

            nazevZdrojPng = NazvySouboruPng[i];

            

            celaAdresaZdrojPng = adresaSlozky + nazevZdrojPng;

            novyObrazek = new NactiPng(adresaSlozky, nazevZdrojPng);

            

            //nacte data z jednoho obrazku

            souradniceVsechBarevObrazku = novyObrazek.getSouradniceVsechBarev();

    public ArrayList<HashMap<String, Integer>> getSouradniceVsechBarev(){

        

        return souradniceVsechBarev;

        

            

            //inicializuje tridu pro ziskani souradnic, ktere jsou pouze cerne

            SouradniceJednohoPismene souradniceCerne = new SouradniceJednohoPismene(souradniceVsechBarevObrazku);

public class SouradniceJednohoPismene {

    

    ArrayList<HashMap<String, Integer>> souradniceVsechBarev = new ArrayList<HashMap<String, Integer>>();

    ArrayList<HashMap<String, Integer>> souradnicePismeneRedukovana = new ArrayList<HashMap<String, Integer>>();

    

    

    public SouradniceJednohoPismene(ArrayList<HashMap<String, Integer>> souradniceVsechBarev){

        

        this.souradniceVsechBarev = souradniceVsechBarev;

          

    }

    

    public ArrayList<HashMap<String, Integer>> getSouradnicePismeneCernobile(int r, int g, int b){

        

        extraktujSouradniceUrciteBarvy(r, g, b);

        return(souradnicePismeneRedukovana);

        

    }

    

    public ArrayList<HashMap<String, Integer>> getSouradniceVztazeneKNule(){

        

        vztahniSouradniceKNule();

        return(souradnicePismeneRedukovana);

        

    }



    

    private void extraktujSouradniceUrciteBarvy(int r, int g, int b){

        

        HashMap<String, Integer> RGB = new HashMap<String, Integer>();

        HashMap<String, Integer> RGBnew = new HashMap<String, Integer>();

        ArrayList<HashMap<String, Integer>> souradnicePismene = new ArrayList<HashMap<String, Integer>>();

        

        int x;

        int y;

        

        int red;

        int green;

        int blue;

        

        for (int i = 0; i < souradniceVsechBarev.size(); i++) {

            RGB = souradniceVsechBarev.get(i);

            

            

            x = RGB.get("x");

            y = RGB.get("y");



            red = RGB.get("Red");

            green = RGB.get("Green");

            blue = RGB.get("Blue");





            if(red == r){

                if(green == g){

                    if(blue == b){

                        RGBnew = zapisRGBDoMapy(x, y, red, green, blue);

                        souradnicePismene.add(RGBnew);

                    }

                }

            }

            

            

          

        }

        

        souradnicePismeneRedukovana = souradnicePismene;

        System.out.print("");

        

    } 

    

    //vztahne souradnice k nule

    private void vztahniSouradniceKNule(){

        

        HashMap<String, Integer> RGB = new HashMap<String, Integer>();

        HashMap<String, Integer> souradnicePismene_0_0 = new HashMap<String, Integer>();

        HashMap<String, Integer> oznaceniDat = new HashMap<String, Integer>();

        

        int xOrig;

        int yOrig;

        

        int xNew;

        int yNew;

        

        int xMin = vratMinimalniSouradnico("x");

        int yMin = vratMinimalniSouradnico("y");

        

        int red;

        int green;

        int blue;

        

        //0-ty radek souradnicePismeneRedukovana oznacuje o jaka data se jedna

        //oznaceniDat.put(nazevData, null);

        souradnicePismeneRedukovana.add(oznaceniDat);

        

        for (int i = 0; i < souradniceVsechBarev.size(); i++) {  

            RGB = souradniceVsechBarev.get(i);

                     

            

            xOrig = RGB.get("x");

            yOrig = RGB.get("y");

            

            xNew = xOrig - xMin + 1;

            yNew = yOrig - yMin + 1;

            

            red = RGB.get("Red");

            green = RGB.get("Green");

            blue = RGB.get("Blue");

            

            

            souradnicePismene_0_0 = zapisRGBDoMapy(xNew, yNew, red, green, blue);

            souradnicePismeneRedukovana.add(souradnicePismene_0_0);

               

        }

        

        

    }

    

    

    int vratMinimalniSouradnico(String XneboY){

        

        HashMap<String, Integer> RGB = new HashMap<String, Integer>();

        

        int sour;

        

        int sourMin = -1;

   

        for (int i = 0; i < souradniceVsechBarev.size(); i++) {

            RGB = souradniceVsechBarev.get(i);

            sour = RGB.get(XneboY);

            

            if(i == 0){

                sourMin = sour;

            }

            else {

                if(sour < sourMin){

                    sourMin = sour;

                }

            }

        }

        

        return(sourMin);

    }

    

    

    private HashMap<String, Integer> zapisRGBDoMapy(int x, int y, int r, int g, int b){

        

        HashMap<String, Integer> RGB = new HashMap<String, Integer>(); 

        

        RGB.put("x", x); 

        RGB.put("y", y); 

        

        RGB.put("Red", r); 

        RGB.put("Green", g); 

        RGB.put("Blue", b);

        

        return(RGB);

        

    }

    

            souradniceObrazkuModifikovane = souradniceCerne.getSouradnicePismeneCernobile(0, 0, 0);

    public ArrayList<HashMap<String, Integer>> getSouradnicePismeneCernobile(int r, int g, int b){

        

        extraktujSouradniceUrciteBarvy(r, g, b);

        return(souradnicePismeneRedukovana);

            

            //re-inicializuje tridu pro ziskani souradnic, ktere jsou vztazene k nule

            SouradniceJednohoPismene souradniceKNule = new SouradniceJednohoPismene(souradniceObrazkuModifikovane);

public class SouradniceJednohoPismene {

    

    ArrayList<HashMap<String, Integer>> souradniceVsechBarev = new ArrayList<HashMap<String, Integer>>();

    ArrayList<HashMap<String, Integer>> souradnicePismeneRedukovana = new ArrayList<HashMap<String, Integer>>();

    

    

    public SouradniceJednohoPismene(ArrayList<HashMap<String, Integer>> souradniceVsechBarev){

        

        this.souradniceVsechBarev = souradniceVsechBarev;

          

    }

    

    public ArrayList<HashMap<String, Integer>> getSouradnicePismeneCernobile(int r, int g, int b){

        

        extraktujSouradniceUrciteBarvy(r, g, b);

        return(souradnicePismeneRedukovana);

        

    }

    

    public ArrayList<HashMap<String, Integer>> getSouradniceVztazeneKNule(){

        

        vztahniSouradniceKNule();

        return(souradnicePismeneRedukovana);

        

    }



    

    private void extraktujSouradniceUrciteBarvy(int r, int g, int b){

        

        HashMap<String, Integer> RGB = new HashMap<String, Integer>();

        HashMap<String, Integer> RGBnew = new HashMap<String, Integer>();

        ArrayList<HashMap<String, Integer>> souradnicePismene = new ArrayList<HashMap<String, Integer>>();

        

        int x;

        int y;

        

        int red;

        int green;

        int blue;

        

        for (int i = 0; i < souradniceVsechBarev.size(); i++) {

            RGB = souradniceVsechBarev.get(i);

            

            

            x = RGB.get("x");

            y = RGB.get("y");



            red = RGB.get("Red");

            green = RGB.get("Green");

            blue = RGB.get("Blue");





            if(red == r){

                if(green == g){

                    if(blue == b){

                        RGBnew = zapisRGBDoMapy(x, y, red, green, blue);

                        souradnicePismene.add(RGBnew);

                    }

                }

            }

            

            

          

        }

        

        souradnicePismeneRedukovana = souradnicePismene;

        System.out.print("");

        

    } 

    

    //vztahne souradnice k nule

    private void vztahniSouradniceKNule(){

        

        HashMap<String, Integer> RGB = new HashMap<String, Integer>();

        HashMap<String, Integer> souradnicePismene_0_0 = new HashMap<String, Integer>();

        HashMap<String, Integer> oznaceniDat = new HashMap<String, Integer>();

        

        int xOrig;

        int yOrig;

        

        int xNew;

        int yNew;

        

        int xMin = vratMinimalniSouradnico("x");

        int yMin = vratMinimalniSouradnico("y");

        

        int red;

        int green;

        int blue;

        

        //0-ty radek souradnicePismeneRedukovana oznacuje o jaka data se jedna

        //oznaceniDat.put(nazevData, null);

        souradnicePismeneRedukovana.add(oznaceniDat);

        

        for (int i = 0; i < souradniceVsechBarev.size(); i++) {  

            RGB = souradniceVsechBarev.get(i);

                     

            

            xOrig = RGB.get("x");

            yOrig = RGB.get("y");

            

            xNew = xOrig - xMin + 1;

            yNew = yOrig - yMin + 1;

            

            red = RGB.get("Red");

            green = RGB.get("Green");

            blue = RGB.get("Blue");

            

            

            souradnicePismene_0_0 = zapisRGBDoMapy(xNew, yNew, red, green, blue);

            souradnicePismeneRedukovana.add(souradnicePismene_0_0);

               

        }

        

        

    }

    

    

    int vratMinimalniSouradnico(String XneboY){

        

        HashMap<String, Integer> RGB = new HashMap<String, Integer>();

        

        int sour;

        

        int sourMin = -1;

   

        for (int i = 0; i < souradniceVsechBarev.size(); i++) {

            RGB = souradniceVsechBarev.get(i);

            sour = RGB.get(XneboY);

            

            if(i == 0){

                sourMin = sour;

            }

            else {

                if(sour < sourMin){

                    sourMin = sour;

                }

            }

        }

        

        return(sourMin);

    }

    

    

    private HashMap<String, Integer> zapisRGBDoMapy(int x, int y, int r, int g, int b){

        

        HashMap<String, Integer> RGB = new HashMap<String, Integer>(); 

        

        RGB.put("x", x); 

        RGB.put("y", y); 

        

        RGB.put("Red", r); 

        RGB.put("Green", g); 

        RGB.put("Blue", b);

        

        return(RGB);

        

    }

    

            souradniceObrazkuModifikovane = souradniceKNule.getSouradniceVztazeneKNule();

    public ArrayList<HashMap<String, Integer>> getSouradniceVztazeneKNule(){

        

        vztahniSouradniceKNule();

        return(souradnicePismeneRedukovana);

        

            

            //zapise souradnice do pole

            MapaPismenAbeceda.add(souradniceObrazkuModifikovane);

            

            System.out.print("");

        }

        

        System.out.print("");

        

       MapaPismenAbeceda = SouradnicePismena.getMapaPismenAbeceda();

       

       //ziska data zkoumaneho obrazku

       zdrojDataZkoum zkoumanaData = new zdrojDataZkoum(adresaProjektu);

    

    String adresaSlozky;

    String NazevSouboruPng;

    

    public zdrojDataZkoum(String adresaProjektu){

        

        //adresaSlozky = "C:\\Users\\jonas\\OneDrive\\Dokumenty\\JAVA_KCT\\TextReader\\TextReader\\test\\";

        adresaSlozky = adresaProjektu + "\\InputOutput\\pictureInput\\";

        NazevSouboruPng = "testPng.png";

        

    }

    

    public String getAdresaSlozky(){

        

        return (adresaSlozky);

        

    }

    

    public String getNazevSouboruPng(){

        

        return (NazevSouboruPng);

       SouradnicePismena.nactiDataZkoumanehoObrazku(zkoumanaData.getAdresaSlozky(), zkoumanaData.getNazevSouboruPng());

       MapaVsechPismenNaVsechRadcich = SouradnicePismena.getMapaVsechPismenNaVsechRadcich();

       

       ///////////////////////////////////////////////////////

       //tiskne data do logu

       convertArrayList csvOutput = new convertArrayList(MapaVsechPismenNaVsechRadcich, "mainResult2.txt");

       ///////////////////////////////////////////////////////

       

       

       //porovnavaData

       PosouzeniSouradnic posouzeni = new PosouzeniSouradnic(MapaPismenAbeceda, MapaVsechPismenNaVsechRadcich);

public class PosouzeniSouradnic {

    

    ArrayList<ArrayList<HashMap<String, Integer>>> MapaPismenAbeceda = new ArrayList<ArrayList<HashMap<String, Integer>>>();

    ArrayList<ArrayList<ArrayList<HashMap<String, Integer>>>> MapaVsechPismenNaVsechRadcich = new ArrayList<ArrayList<ArrayList<HashMap<String, Integer>>>>();

    

    //data obdsahuji posouzeni vsech pismen vsech radku z obrazku vuci vsem pismenum abecedy

    ArrayList<ArrayList<ArrayList<HashMap<String, Double>>>> posouzeniPismenePngVsechRadkuKeVsemPismenABC = new ArrayList<ArrayList<ArrayList<HashMap<String, Double>>>>();

    

    

    public PosouzeniSouradnic(ArrayList<ArrayList<HashMap<String, Integer>>> MapaPismenAbeceda, ArrayList<ArrayList<ArrayList<HashMap<String, Integer>>>> MapaVsechPismenNaVsechRadcich){

        

        this.MapaPismenAbeceda = MapaPismenAbeceda;

        this.MapaVsechPismenNaVsechRadcich = MapaVsechPismenNaVsechRadcich;

        

        //zatim provizorne ziskavam data jakozto dilci mapy pismenek, ktere budou porovnavat

        ArrayList<ArrayList<HashMap<String, Integer>>> MapaVsechPismenNaJednomRadku = new ArrayList<ArrayList<HashMap<String, Integer>>>();

        ArrayList<HashMap<String, Integer>> MapaPismeneZVybranehoSloupce = new ArrayList<HashMap<String, Integer>>();

        

        //data obdsahuji posouzeni jednoho pismene z obrazku vuci vsem pismenum abecedy, ten s nejmensi odchylkaSqrt vyhrava

        ArrayList<HashMap<String, Double>> posouzeniJednohoPismenePngKeVsemPismenumABC = new ArrayList<HashMap<String, Double>>();

        

        ArrayList<ArrayList<HashMap<String, Double>>> posouzeniVsechPismenPngKeVsemPismenumABC = new ArrayList<ArrayList<HashMap<String, Double>>>();

        

        //data obdsahuji posouzeni vsech pismen jednoho radku z obrazku vuci vsem pismenum abecedy

        ArrayList<ArrayList<ArrayList<HashMap<String, Double>>>> posouzeniPismenePngJednohoRadkuKeVsemPismenABC = null;

        

        for (int r = 0; r < MapaVsechPismenNaVsechRadcich.size(); r++) {

            MapaVsechPismenNaJednomRadku = MapaVsechPismenNaVsechRadcich.get(r);

            posouzeniVsechPismenPngKeVsemPismenumABC = new ArrayList<ArrayList<HashMap<String, Double>>>();

            

            for (int s = 0; s < MapaVsechPismenNaJednomRadku.size(); s++) {

                MapaPismeneZVybranehoSloupce = MapaVsechPismenNaJednomRadku.get(s);

        

                posouzeniJednohoPismenePngKeVsemPismenumABC = (provedPosouzeniProVsechnaPismenaAbecedy(MapaPismeneZVybranehoSloupce, MapaPismenAbeceda));

                posouzeniVsechPismenPngKeVsemPismenumABC.add(posouzeniJednohoPismenePngKeVsemPismenumABC);

                System.out.print("");

            } 

            

            posouzeniPismenePngVsechRadkuKeVsemPismenABC.add(posouzeniVsechPismenPngKeVsemPismenumABC);

        }    

        

        //posouzeniPismenePngVsechRadkuKeVsemPismenABC.add(posouzeniPismenePngJednohoRadkuKeVsemPismenABC);

        System.out.print("");

    }

    

  

    public ArrayList<ArrayList<ArrayList<HashMap<String, Double>>>> getPosouzeni(){

        

        return(posouzeniPismenePngVsechRadkuKeVsemPismenABC);

        

    }

    

    //porovna vybrane pismeno z png se vsema pismenama z abecedy

    private ArrayList<HashMap<String, Double>> provedPosouzeniProVsechnaPismenaAbecedy(ArrayList<HashMap<String, Integer>> MapaPismenePng, ArrayList<ArrayList<HashMap<String, Integer>>> MapaPismenAbeceda){

        

        //data obdsahuji posouzeni jednoho pismene z obrazku vuci vsem pismenum abecedy, ten s nejmensi odchylkaSqrt vyhrava

        ArrayList<HashMap<String, Double>> posouzeniJednohoPismenePngKeVsemPismenABC = new ArrayList<HashMap<String, Double>>();

        

        ArrayList<HashMap<String, Integer>> MapaPismeneZAbecedy = new ArrayList<HashMap<String, Integer>>();

        HashMap<String, Double> posouzeniJednohoPismeneABC = new HashMap<String, Double>();

        

        

        for (int i = 0; i < MapaPismenAbeceda.size(); i++) {

            MapaPismeneZAbecedy = MapaPismenAbeceda.get(i);

            

            posouzeniJednohoPismeneABC = vratPosouzeniTamANazpet(MapaPismenePng, MapaPismeneZAbecedy);

            posouzeniJednohoPismenePngKeVsemPismenABC.add(posouzeniJednohoPismeneABC);

        }

        

        return (posouzeniJednohoPismenePngKeVsemPismenABC);

   

    }

    

    

    //posouzeni tam a nazpet

    private HashMap<String, Double> vratPosouzeniTamANazpet(ArrayList<HashMap<String, Integer>> MapaPismenePng, ArrayList<HashMap<String, Integer>> MapaPismeneAbeceda){

    

        //porovna jeden pixel zkoumaneho pismena ke vsem pixelum pismena abecedy

        HashMap<String, Double> posouzeniTam = new HashMap<String, Double>();

        

        //porovna jeden pixel pismena abecedy ke vsem pixelum zkoumaneho pismena

        HashMap<String, Double> posouzeniZpet = new HashMap<String, Double>();

        

        //vraci to posouzeni, ktere je z obou smeru maximalni (porovnava pouze odchylkuSqrt)

        HashMap<String, Double> posouzeniMax = new HashMap<String, Double>();

        

        double odchylkaSqrtTam;

        double odchylkaSqrtZpet;

        

        posouzeniTam = vratPosouzeni(MapaPismenePng, MapaPismeneAbeceda);

        posouzeniZpet = vratPosouzeni(MapaPismeneAbeceda, MapaPismenePng); 

        

        odchylkaSqrtTam = posouzeniTam.get("odchylkaSqrt");

        odchylkaSqrtZpet = posouzeniZpet.get("odchylkaSqrt");

        

        

        if(odchylkaSqrtTam > odchylkaSqrtZpet){

            posouzeniMax = posouzeniTam;

        }

        else {

            posouzeniMax = posouzeniZpet;

        }

        

        

        return(posouzeniMax);

        

    }



   

    //zkusit volat metodu taky obracene

    private HashMap<String, Double> vratPosouzeni(ArrayList<HashMap<String, Integer>> MapaPismenePng, ArrayList<HashMap<String, Integer>> MapaPismeneAbeceda){

        

        //MapaPismenePng obsahuje pouze jedno pismeno z png

        //MapaPismeneAbeceda obsahuje pouze jedno pismeno z abecedy

        

        int xABC;

        int yABC;

        

        double prumerRozdiluX;

        double prumerRozdiluY;

        

        double odchylkaOdPrumeruX = 0;

        double odchylkaOdPrumeruY = 0;

        

        double odchylkaOdPrumeruXprumer;

        double odchylkaOdPrumeruYprumer;

        

        double odchylkaSqrt;

        

        

        HashMap<String, Integer> RGBabc = new HashMap<String, Integer>();

        HashMap<String, Integer> nejblizsiSouradnice = new HashMap<String, Integer>();

        HashMap<String, Double> posouzeni = new HashMap<String, Double>();

        

        //obsahuje nejblizsi souradnice z png vztazene ke kazde sozradnici v abc

        ArrayList<HashMap<String, Integer>> nejblizsiSouradniceVsechPixeluABC = new ArrayList<HashMap<String, Integer>>();

        

        

        //sestavi pole nejblizsiSouradniceVsechPixeluABC

        for (int i = 0; i < MapaPismeneAbeceda.size(); i++) {

            

            RGBabc = MapaPismeneAbeceda.get(i);

            

            try {

                xABC = RGBabc.get("x");

                yABC = RGBabc.get("y");

                

                nejblizsiSouradnice = vratNejblizsiSouradnici(MapaPismenePng, xABC, yABC);

                nejblizsiSouradniceVsechPixeluABC.add(nejblizsiSouradnice);

                

            }

            

            catch(Exception e){

                System.out.println(e);

            }

  

        } 

        

        

        //dopocita prumerny rozdil X a Y

        prumerRozdiluX = vratPrumernouHodnotuRozdiluSouradnic(nejblizsiSouradniceVsechPixeluABC, "x");

        prumerRozdiluY = vratPrumernouHodnotuRozdiluSouradnic(nejblizsiSouradniceVsechPixeluABC, "y");

        

        odchylkaOdPrumeruX = vratOdchylkuOdPrumeru(nejblizsiSouradniceVsechPixeluABC, "x", prumerRozdiluX);

        odchylkaOdPrumeruY = vratOdchylkuOdPrumeru(nejblizsiSouradniceVsechPixeluABC, "y", prumerRozdiluY);

        

        odchylkaOdPrumeruXprumer = odchylkaOdPrumeruX * prumerRozdiluX;

        odchylkaOdPrumeruYprumer = odchylkaOdPrumeruY * prumerRozdiluY;

        

        odchylkaSqrt = sqrt(odchylkaOdPrumeruXprumer + odchylkaOdPrumeruYprumer);

        

        

        posouzeni.put("prumerRozdiluX", prumerRozdiluX);

        posouzeni.put("prumerRozdiluY", prumerRozdiluY);

        posouzeni.put("odchylkaOdPrumeruX", odchylkaOdPrumeruX);

        posouzeni.put("odchylkaOdPrumeruY", odchylkaOdPrumeruY);

        posouzeni.put("odchylkaOdPrumeruXprumer", odchylkaOdPrumeruXprumer);

        posouzeni.put("odchylkaOdPrumeruYprumer", odchylkaOdPrumeruYprumer);

        posouzeni.put("odchylkaSqrt", odchylkaSqrt);

        

        

        return(posouzeni);

    }

    

    

    

    

    private HashMap<String, Integer> vratNejblizsiSouradnici(ArrayList<HashMap<String, Integer>> MapaPismenePng, int xABC, int yABC){

        

        int xPng = -999;

        int yPng = -999;

        

        int rozdilX;

        int rozdilY;

        

        int xPngMin = -999;

        int yPngMin = -999;

        

        double rozdil;

        double rozdilMin = 999;

        

        int indexSNejblizsiSouradnici = -1;

        boolean prvniCyklus = true;

        

        HashMap<String, Integer> RGBpng = new HashMap<String, Integer>();

        HashMap<String, Integer> nejblizsiSouradnice = new HashMap<String, Integer>();

        

        for (int i = 0; i < MapaPismenePng.size(); i++) {

            

            System.out.print("");

            

            RGBpng = MapaPismenePng.get(i);

            

            try{

               

                xPng = RGBpng.get("x");

                yPng = RGBpng.get("y");



                rozdilX = abs(xPng - xABC);

                rozdilY = abs(yPng - yABC);

                

                rozdil = sqrt(rozdilX*rozdilX + rozdilY*rozdilY);



                if(prvniCyklus == true){

                    rozdilMin = rozdil;

                    indexSNejblizsiSouradnici = i;

                    xPngMin = xPng;

                    yPngMin = yPng;

                    

                    prvniCyklus = false;

                }

                else {

                    if(rozdil < rozdilMin){

                        rozdilMin = rozdil;

                        indexSNejblizsiSouradnici = i;

                        xPngMin = xPng;

                        yPngMin = yPng;

                    }

                }

            }

            catch(Exception e){

                System.out.println(e);

            }

        }

        

  

        nejblizsiSouradnice = vratMapuNejblizsiSouradnice(xPngMin, yPngMin, xABC, yABC);

        

    private HashMap<String, Integer> vratMapuNejblizsiSouradnice(int xPng, int yPng, int xABC, int yABC){

        

        HashMap<String, Integer> nejblizsiSouradnice = new HashMap<String, Integer>();

        

        int rozdilX;

        int rozdilY;

        

        rozdilX = abs(xABC - xPng);

        rozdilY = abs(yABC - yPng);

        

        nejblizsiSouradnice.put("xPng", xPng);

        nejblizsiSouradnice.put("yPng", yPng);

        nejblizsiSouradnice.put("xABC", xABC);

        nejblizsiSouradnice.put("yABC", yABC);

        nejblizsiSouradnice.put("rozdilX", rozdilX);

        nejblizsiSouradnice.put("rozdilY", rozdilY);

        

        return (nejblizsiSouradnice);

        

        return (nejblizsiSouradnice);

        

    }

    

    

    private HashMap<String, Integer> vratMapuNejblizsiSouradnice(int xPng, int yPng, int xABC, int yABC){

        

        HashMap<String, Integer> nejblizsiSouradnice = new HashMap<String, Integer>();

        

        int rozdilX;

        int rozdilY;

        

        rozdilX = abs(xABC - xPng);

        rozdilY = abs(yABC - yPng);

        

        nejblizsiSouradnice.put("xPng", xPng);

        nejblizsiSouradnice.put("yPng", yPng);

        nejblizsiSouradnice.put("xABC", xABC);

        nejblizsiSouradnice.put("yABC", yABC);

        nejblizsiSouradnice.put("rozdilX", rozdilX);

        nejblizsiSouradnice.put("rozdilY", rozdilY);

        

        return (nejblizsiSouradnice);

        

    }

    

    

    private double vratPrumernouHodnotuRozdiluSouradnic(ArrayList<HashMap<String, Integer>> nejblizsiSouradniceVsechPixeluABC, String XneboY){

        

        HashMap<String, Integer> RGBrozdilySour = new HashMap<String, Integer>();

        int rozdilSour;

        int rozdilSourSuma = 0;

        

        double rozdilSourSumaDbl;

        double pocetHodnotDbl;

        double rozdilSourPrumerDbl;

        

        for (int i = 0; i < nejblizsiSouradniceVsechPixeluABC.size(); i++) {

            

            RGBrozdilySour = nejblizsiSouradniceVsechPixeluABC.get(i);

            

            if(XneboY == "x"){

                rozdilSour = RGBrozdilySour.get("rozdilX");

            }

            else {

                rozdilSour = RGBrozdilySour.get("rozdilY");

            }

            

            rozdilSourSuma = rozdilSourSuma + rozdilSour;

            

        }

        

 

        rozdilSourSumaDbl = rozdilSourSuma;

        pocetHodnotDbl = nejblizsiSouradniceVsechPixeluABC.size();

        rozdilSourPrumerDbl = rozdilSourSumaDbl/pocetHodnotDbl;

        

        

        return(rozdilSourPrumerDbl);

            

    }

    

    private double vratOdchylkuOdPrumeru(ArrayList<HashMap<String, Integer>> nejblizsiSouradniceVsechPixeluABC, String XneboY, double prumer){

        

        HashMap<String, Integer> RGBrozdilySour = new HashMap<String, Integer>();

        double maximalniRozdil = 0;

        double Rozdil = 0;

        double odchylkaOdPrumeru;

    

        

        for (int i = 0; i < nejblizsiSouradniceVsechPixeluABC.size(); i++) {

            

            RGBrozdilySour = nejblizsiSouradniceVsechPixeluABC.get(i);

            

            if(XneboY == "x"){

                Rozdil = RGBrozdilySour.get("rozdilX");

            }

            else {

                Rozdil = RGBrozdilySour.get("rozdilY");

            }

            

            if(Rozdil > maximalniRozdil){

                maximalniRozdil = Rozdil; 

            }

            

        }

        

        odchylkaOdPrumeru = abs(maximalniRozdil - prumer);

        

        return(odchylkaOdPrumeru);

        

    } 

    

       posouzeniPismenePngVsechRadkuKeVsemPismenABC = posouzeni.getPosouzeni();

    public ArrayList<ArrayList<ArrayList<HashMap<String, Double>>>> getPosouzeni(){

        

        return(posouzeniPismenePngVsechRadkuKeVsemPismenABC);

        

       

       PorovnaniSouradnic porovnani = new PorovnaniSouradnic(posouzeniPismenePngVsechRadkuKeVsemPismenABC, adresaProjektu);

       pismenaVPng = porovnani.getPismenaVPng();

    

    //data obdsahuji posouzeni vsech pismen vsech radku z obrazku vuci vsem pismenum abecedy

    ArrayList<ArrayList<ArrayList<HashMap<String, Double>>>> posouzeniPismenePngVsechRadkuKeVsemPismenumABC = new ArrayList<ArrayList<ArrayList<HashMap<String, Double>>>>();

    

    //obshuje pole pismen v celem obrazku - radcich + sloupcich

    ArrayList<ArrayList<String>> pismenaVPng = new ArrayList<ArrayList<String>>();

    

    public PorovnaniSouradnic(ArrayList<ArrayList<ArrayList<HashMap<String, Double>>>> posouzeniPismenePngVsechRadkuKeVsemPismenABC, String adresaProjektu){

        

        //data obsahuji posouzeni vsech pismen jednoho radku z obrazku vuci vsem pismenum abecedy

        ArrayList<ArrayList<HashMap<String, Double>>> posouzeniPismenePngJednohoRadkuKeVsemPismenABC = new ArrayList<ArrayList<HashMap<String, Double>>>();

        

        //data obsahuji posouzeni jednoho pismene z obrazku vuci vsem pismenum abecedy, ten s nejmensi odchylkaSqrt vyhrava

        ArrayList<HashMap<String, Double>> posouzeniJednohoPismenePngKeVsemPismenumABC = new ArrayList<HashMap<String, Double>>();

        

        //obshuje pole pismen na radku

        ArrayList<String> pismenaNaRadku = null;

        



         

        //nazvy pismen

        String[] NazvySouboruPng;

        

        String pismeno;

        

        zdrojDataAbeceda pismenaABC = new zdrojDataAbeceda(adresaProjektu);

        NazvySouboruPng = pismenaABC.getNazvySouboruPng();

        

        this.posouzeniPismenePngVsechRadkuKeVsemPismenumABC = posouzeniPismenePngVsechRadkuKeVsemPismenABC;

        

        for (int r = 0; r < posouzeniPismenePngVsechRadkuKeVsemPismenumABC.size(); r++) {

            posouzeniPismenePngJednohoRadkuKeVsemPismenABC = posouzeniPismenePngVsechRadkuKeVsemPismenumABC.get(r);

            pismenaNaRadku = new ArrayList<String>();

            

            for (int s = 0; s < posouzeniPismenePngJednohoRadkuKeVsemPismenABC.size(); s++) {

                posouzeniJednohoPismenePngKeVsemPismenumABC = posouzeniPismenePngJednohoRadkuKeVsemPismenABC.get(s);

        

                pismeno = vratOdpovidajiciPismena(posouzeniJednohoPismenePngKeVsemPismenumABC, NazvySouboruPng);

                pismenaNaRadku.add(pismeno);

            } 

            

            pismenaVPng.add(pismenaNaRadku);

            System.out.print("");

        }   

        

        System.out.print("");

    }

    

    

    public ArrayList<ArrayList<String>> getPismenaVPng(){

        return(pismenaVPng);

    }

    

    private String vratOdpovidajiciPismena(ArrayList<HashMap<String, Double>> posouzeniVsechPismenPngKeVsemPismenumABC, String[] NazvySouboruPng){

        

        double nejmensiHodnota = -999;

        double posuzovanaHodnota;

        int indexOdpovidajicihoPismene = -1;

        String pismeno;

        

        HashMap<String, Double> posouzeniJednohoPismenePngKeVsemPismenumABC = new HashMap<String, Double>();

        HashMap<String, Double> posouzeniData = new HashMap<String, Double>();

      

        for (int i = 0; i < posouzeniVsechPismenPngKeVsemPismenumABC.size(); i++) {

            posouzeniJednohoPismenePngKeVsemPismenumABC = posouzeniVsechPismenPngKeVsemPismenumABC.get(i);

            posuzovanaHodnota = posouzeniJednohoPismenePngKeVsemPismenumABC.get("odchylkaSqrt");

      

            if(i == 0){

                nejmensiHodnota = posuzovanaHodnota;

                indexOdpovidajicihoPismene = i;

            }

            else {

                if(posuzovanaHodnota < nejmensiHodnota){

                    nejmensiHodnota = posuzovanaHodnota;

                    indexOdpovidajicihoPismene = i;

                }

            }

            System.out.print("");

        }

        

        

        if(indexOdpovidajicihoPismene > -1){

            pismeno = vratOdpovidajiciPismeno(NazvySouboruPng, indexOdpovidajicihoPismene);

        }

        else {

            pismeno = "Err";

        }

        

        return (pismeno);

        

    }

    

    

    private String vratOdpovidajiciPismeno(String[] NazvySouboruPng, int indexOdpovidajicihoPismene){

        

        String nazevSouboru;

        String pismeno;

        String[] splitArr;

        

        nazevSouboru = NazvySouboruPng[indexOdpovidajicihoPismene];

        splitArr = nazevSouboru.split("\\.");

        pismeno = splitArr[0];

        

        return(pismeno);

    }



    

       System.out.print("");

       

       

       createOutput vytvorVystup = new createOutput(pismenaVPng, adresaProjektu, "\\InputOutput\\outputs\\output.csv");

       

       

       //testuje data - zakom./odkomentovat jeden nebo druhy radek, podle toho, co chci tisknout

       //TestData test = new TestData(MapaPismenAbeceda, 0);

       //TestData test = new TestData(MapaVsechPismenNaVsechRadcich, 0, 0);

       

       //test.TiskDoPng();

        

    }

    

